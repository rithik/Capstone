{"version":3,"sources":["utils/generateKeys.tsx","utils/localStorageKeyGen.ts","components/register.react.js","utils/AESEncryption.js","components/ChatLeftList.react.js","components/ChatFeed.react.js","components/ChatMessages.react.js","components/GroupChatTags.react.js","components/ChatMain.react.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["ab2str","buf","String","fromCharCode","apply","Array","from","Uint8Array","exportCryptoPublicKey","key","a","window","crypto","subtle","exportKey","exported","exportedAsString","exportedAsBase64","btoa","pemExported","exportCryptoPrivateKey","generateKeys","username","generateKey","name","modulusLength","publicExponent","hash","then","keyPair","publicKey","privateKey","response","generatePasswordHash","password","pbkdf2","pbkdf2Sync","toString","encryptLocalStorage","localStorageString","JSON","stringify","localStorage","hashedPassword","getItem","CryptoJS","AES","encrypt","setLocalStorage","decrypt","localStorageDict","parse","enc","Utf8","Object","entries","value","setItem","e","console","error","CREATE_USER","gql","CREATE_TOKEN","GET_USER","UPDATE_KEYS","Register","useMutation","updateKeys","onCompleted","createUser","createToken","variables","tab","loginPassword","registerPassword","token","keys","location","href","createLoginToken","useState","registerUsername","setRegisterUsername","setRegisterPassword","loginUsername","setLoginUsername","setLoginPassword","registerUsernameError","setRegisterUsernameError","loginError","setLoginError","buttonPressed","setButtonPressed","setTab","useQuery","loading","refetch","data","setKeys","myUsernameValue","Promise","resolve","array","registerUser","userData","user","loginUser","log","Tabs","fill","id","className","activeKey","onSelect","k","Tab","eventKey","title","TextField","InputProps","style","color","label","variant","fullWidth","onChange","target","type","Button","disabled","onClick","preventDefault","CircularProgress","size","marginRight","Collapse","in","Alert","action","IconButton","aria-label","fontSize","severity","encryptMessage","message","groupId","messageJSON","messageString","groupPrivateKey","decryptMessage","decryptMessageForPrivateKey","crypt","JSEncrypt","setPrivateKey","GET_GROUPS","GROUP_SUBSCRIPTION","ChatLeftList","selectedGroup","setSelectedGroup","setDoneFetching","client","firstLoad","setFirstLoad","subscribeToMore","useEffect","document","updateQuery","prev","subscriptionData","newGroup","assign","groupsByUser","resetStore","groupDivs","map","group","users","active","letter","charAt","toUpperCase","justify","ellipsis","join","maxWidth","override","css","SEND_MESSAGE","ChatFeed","onLoadMore","doneFetching","subscribeToNewMessages","messageInput","setMessageInput","createMessage","messagesEndRef","React","createRef","messagesStartRef","lm","reversedEntries","concat","messagesByGroup","reverse","messages","Message","sender","content","senderName","filter","Boolean","scrollIntoView","behavior","setInterval","top","getBoundingClientRect","innerHeight","marginLeft","marginBottom","height","ref","el","showSenderName","bubblesCentered","bubbleStyles","text","chatbubble","borderRadius","padding","float","clear","Form","width","bottom","position","Group","Control","placeholder","onKeyPress","event","gid","cType","GET_MESSAGES","MESSAGE_SUBSCRIPTION","ChatMessages","offset","limit","fetchPolicy","fetchMore","length","fetchMoreResult","newFeedItem","newMessage","CREATE_GROUP","GroupChatTags","show","setShow","tags","setTags","handleClose","groupName","setgroupName","createPrivateKey","createGroup","removeItem","setPublicKey","encryptMessageForPrivateKey","createGroupChat","raw_tags","push","index","self","indexOf","generateGroupKeys","Modal","transparent","onHide","Header","closeButton","Title","Body","newTags","inputProps","onlyUnique","marginTop","Footer","themes","defaultTheme","FixedWrapperMaximized","boxShadow","OwnMessage","backgroundColor","secondaryTextColor","purpleTheme","TextComposer","elegantTheme","darkTheme","TitleBar","ChatMain","theme","zIndex","overflowX","paddingTop","left","fullURL","split","pop","baseURL","right","border","App","PRODUCTION","includes","serverURL","wsURL","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","wsLink","WebSocketLink","options","reconnect","connectionParams","Authorization","splitLink","query","definition","getMainDefinition","kind","operation","ApolloClient","link","cache","InMemoryCache","basename","path","hostname","match","ReactDOM","render","Fragment","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fd031540.chunk.js","sourcesContent":["import '../App.css';\nimport pbkdf2 from 'pbkdf2';\n\nfunction ab2str(buf: any) {\n    return String.fromCharCode.apply(null, Array.from(new Uint8Array(buf)));\n}\n\nasync function exportCryptoPublicKey(key: any) {\n    const exported = await window.crypto.subtle.exportKey(\n        \"spki\",\n        key\n    );\n    const exportedAsString = ab2str(exported);\n    const exportedAsBase64 = window.btoa(exportedAsString);\n    const pemExported = `-----BEGIN PUBLIC KEY-----\\n${exportedAsBase64}\\n-----END PUBLIC KEY-----`;\n    return pemExported;\n}\n\nasync function exportCryptoPrivateKey(key: any) {\n    const exported = await window.crypto.subtle.exportKey(\n        \"pkcs8\",\n        key\n    );\n    const exportedAsString = ab2str(exported);\n    const exportedAsBase64 = window.btoa(exportedAsString);\n    const pemExported = `-----BEGIN PRIVATE KEY-----\\n${exportedAsBase64}\\n-----END PRIVATE KEY-----`;\n    return pemExported;\n}\n\n\nexport async function generateKeys(username: string) {\n    const response = await window.crypto.subtle.generateKey({\n        name: \"RSA-OAEP\",\n        modulusLength: 8192,\n        publicExponent: new Uint8Array([1, 0, 1]),\n        hash: \"SHA-256\",\n    },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    ).then(async (keyPair) => {\n        const publicKey = await exportCryptoPublicKey(keyPair.publicKey);\n        const privateKey = await exportCryptoPrivateKey(keyPair.privateKey);\n        return {\n            privateKey,\n            username,\n            publicKey\n        }\n    });\n    return response;\n}\n\n\nexport async function generateGroupKeys(username: string) {\n    const response = await window.crypto.subtle.generateKey({\n        name: \"RSA-OAEP\",\n        modulusLength: 256,\n        publicExponent: new Uint8Array([1, 0, 1]),\n        hash: \"SHA-256\",\n    },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    ).then(async (keyPair) => {\n        const publicKey = await exportCryptoPublicKey(keyPair.publicKey);\n        const privateKey = await exportCryptoPrivateKey(keyPair.privateKey);\n        return {\n            privateKey,\n            username,\n            publicKey\n        }\n    });\n    return response;\n};\n\nexport function generatePasswordHash(password: string){\n    var derivedKey = pbkdf2.pbkdf2Sync(password, 'salt', 1, 32, 'sha512').toString('hex');\n    return derivedKey;\n}","import CryptoJS from \"crypto-js\";\n\nexport function encryptLocalStorage() {\n    const localStorageString = JSON.stringify(localStorage);\n    const hashedPassword: string = localStorage.getItem('password') || '';\n    const encrypted = CryptoJS.AES.encrypt(localStorageString, hashedPassword).toString();\n    return encrypted;\n}\n\nexport function setLocalStorage(localStorageString: string, hashedPassword: string) {\n    const decrypt = CryptoJS.AES.decrypt(localStorageString, hashedPassword);\n    try{\n        const localStorageDict = JSON.parse(decrypt.toString(CryptoJS.enc.Utf8));\n        for (const [key, value] of Object.entries(localStorageDict)) {\n            localStorage.setItem(key, (value as string));\n        }\n    }\n    catch(e){\n        console.error(e);\n        return false;\n    }\n    return true;\n}","import React, { useState } from 'react';\nimport './../App.css';\nimport { generateKeys, generatePasswordHash } from '../utils/generateKeys'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField'\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport Alert from '@material-ui/lab/Alert';\nimport IconButton from '@material-ui/core/IconButton';\nimport Collapse from '@material-ui/core/Collapse';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport { encryptLocalStorage, setLocalStorage } from '../utils/localStorageKeyGen';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst CREATE_USER = gql`\n\tmutation CreateUser($username: String!, $publicKey: String!){\n\t  createUser(username:$username, publicKey:$publicKey){\n\t    id\n\t    username\n\t    publicKey\n\t  }\n\t}\n`;\nconst CREATE_TOKEN = gql`\n\tmutation CreateToken($username: String!, $publicKey: String!){\n\t\t  createToken(username:$username, publicKey:$publicKey){\n\t\t    token\n\t\t    username\n\t\t}\n\t}\n`;\nconst GET_USER = gql`\n\tquery User($username: String!){\n\t\tuser(username:$username){\n\t\t\tusername\n\t\t\tid\n\t\t\tkeys\n\t\t}\n\t}\n`;\n\nconst UPDATE_KEYS = gql`\n    mutation updateKeys($username: String!, $keys: String!){\n        updateKeys(username:$username, keys:$keys){\n            success\n        }\n    }\n`;\n\n// register the user\nfunction Register() {\n\tconst [updateKeys] = useMutation(UPDATE_KEYS);\n\tconst [createUser] = useMutation(CREATE_USER, {\n\t\tonCompleted({ createUser }) {\n\t\t\tconst username = createUser.username;\n\t\t\tconst publicKey = createUser.publicKey;\n\t\t\tcreateToken({ variables: { username, publicKey } });\n\t\t}\n\t});\n\tconst [createToken] = useMutation(CREATE_TOKEN, {\n\t\tonCompleted({ createToken }) {\n\t\t\tconst password = tab === 'login' ? loginPassword : registerPassword;\n\t\t\tlocalStorage.setItem('token', createToken.token);\n\t\t\tlocalStorage.setItem('username', createToken.username);\n\t\t\tlocalStorage.setItem('password', generatePasswordHash(password));\n\t\t\tupdateKeys({ variables: { username: createToken.username, keys: encryptLocalStorage() } });\n\t\t\twindow.location.href = window.location.href + 'main';\n\t\t}\n\t});\n\n\tconst [createLoginToken] = useMutation(CREATE_TOKEN, {\n\t\tonCompleted({ createToken }) {\n\t\t\tlocalStorage.setItem('token', createToken.token);\n\t\t\twindow.location.href = window.location.href + 'main';\n\t\t}\n\t});\n\n\tconst [registerUsername, setRegisterUsername] = useState('');\n\tconst [registerPassword, setRegisterPassword] = useState('');\n\n\tconst [loginUsername, setLoginUsername] = useState('');\n\tconst [loginPassword, setLoginPassword] = useState('');\n\n\tconst [registerUsernameError, setRegisterUsernameError] = useState(false);\n\tconst [loginError, setLoginError] = useState(false);\n\n\tconst [buttonPressed, setButtonPressed] = useState(false);\n\n\tconst [tab, setTab] = useState('login');\n\n\tconst { loading, error, data, refetch } = useQuery(GET_USER, {\n\t\tvariables: { username: tab === 'login' ? loginUsername : registerUsername },\n\t});\n\n\tconst setKeys = async (myUsernameValue) => {\n\t\tconst username = tab === 'login' ? loginUsername : registerUsername;\n\t\tconst x = Promise.resolve(generateKeys(myUsernameValue)).then(function (array) {\n\t\t\tconst publicKey = array.publicKey\n\t\t\tconst privateKey = array.privateKey\n\t\t\tcreateUser({ variables: { username, publicKey } });\n\t\t\tlocalStorage.setItem('user-publicKey', publicKey);\n\t\t\tlocalStorage.setItem('user-privateKey', privateKey);\n\t\t\tlocalStorage.setItem('username', username);\n\t\t});\n\t}\n\n\tconst registerUser = async () => {\n\t\tconst {data: userData} = await refetch({username: registerUsername});\n\t\tif (error) {\n\t\t\tsetKeys(registerUsername);\n\t\t}\n\t\telse {\n\t\t\tif (userData.user == null) {\n\t\t\t\tsetRegisterUsernameError(false);\n\t\t\t\tsetKeys(registerUsername);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsetRegisterUsernameError(true);\n\t\t\t\tsetButtonPressed(false);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst loginUser = async () => {\n\t\tconst {data: userData} = await refetch({username: loginUsername});\n\t\tconsole.log(userData);\n\t\tif (error) {\n\t\t\tconsole.error(error);\n\t\t\tsetLoginError(true);\n\t\t\tsetButtonPressed(false);\n\t\t}\n\t\telse {\n\t\t\tif (userData.user === null) {\t\t\t\t\n\t\t\t\tsetLoginError(true);\n\t\t\t\tsetButtonPressed(false);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst hashedPassword = generatePasswordHash(loginPassword);\n\t\t\t\tconst success = setLocalStorage(userData.user.keys, hashedPassword);\n\t\t\t\tif (success) {\n\t\t\t\t\tconst username = localStorage.getItem('username');\n\t\t\t\t\tconst publicKey = localStorage.getItem('user-publicKey');\n\t\t\t\t\tcreateLoginToken({ variables: { username, publicKey } });\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsetLoginError(true);\n\t\t\t\t\tsetButtonPressed(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (\n\t\t<Tabs fill={true}\n\t\t\tid=\"controlled-tab-example\"\n\t\t\tclassName=\"tabHeadings\"\n\t\t\tactiveKey={tab}\n\t\t\tonSelect={(k) => setTab(k)}\n\t\t>\n\t\t\t<Tab eventKey=\"login\" title=\"Login\">\n\t\t\t\t<div className=\"register\">\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\tstyle: { color: \"black\" },\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tid=\"outlined-basic\" label=\"Username\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={loginUsername}\n\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\tonChange={(e) => setLoginUsername(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\tstyle: { color: \"black\" },\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tid=\"outlined-basic\" label=\"Password\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={loginPassword}\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\tonChange={(e) => setLoginPassword(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<Button disabled={buttonPressed} onClick={(e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tsetButtonPressed(true);\n\t\t\t\t\t\tloginUser()\n\t\t\t\t\t}} variant=\"contained\" color=\"secondary\">\n\t\t\t\t\t\t{buttonPressed && <CircularProgress\n\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\tstyle={{ color: 'white', marginRight: '10px' }}\n\t\t\t\t\t\t/>} Login\n\t\t\t</Button>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<Collapse in={loginError}>\n\t\t\t\t\t\t<Alert\n\t\t\t\t\t\t\taction={\n\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\taria-label=\"close\"\n\t\t\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tsetLoginError(false);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CloseIcon fontSize=\"inherit\" />\n\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvariant=\"filled\" severity=\"error\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tInvalid Login\n\t\t\t\t</Alert>\n\t\t\t\t\t</Collapse>\n\n\t\t\t\t</div>\n\t\t\t</Tab>\n\t\t\t<Tab eventKey=\"register\" title=\"Register\">\n\t\t\t\t<div className=\"register\">\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\tstyle: { color: \"black\" },\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tid=\"outlined-basic\" label=\"Username\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={registerUsername}\n\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\tonChange={(e) => setRegisterUsername(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\tstyle: { color: \"black\" },\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tid=\"outlined-basic\" label=\"Password\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={registerPassword}\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\tonChange={(e) => setRegisterPassword(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<Button disabled={buttonPressed} onClick={(e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tsetButtonPressed(true);\n\t\t\t\t\t\tregisterUser();\n\t\t\t\t\t}} variant=\"contained\" color=\"secondary\">\n\t\t\t\t\t\t{buttonPressed && <CircularProgress\n\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\tstyle={{ color: 'white', marginRight: '10px' }}\n\t\t\t\t\t\t/>} Register\n\t\t\t</Button>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<Collapse in={registerUsernameError}>\n\t\t\t\t\t\t<Alert\n\t\t\t\t\t\t\taction={\n\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\taria-label=\"close\"\n\t\t\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tsetRegisterUsernameError(false);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CloseIcon fontSize=\"inherit\" />\n\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvariant=\"filled\" severity=\"error\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tInvalid username - choose a unique username\n\t\t\t\t</Alert>\n\t\t\t\t\t</Collapse>\n\n\t\t\t\t</div>\n\t\t\t</Tab>\n\t\t</Tabs>\n\t);\n}\n\nexport default Register;\n","import JSEncrypt from 'jsencrypt';\nimport CryptoJS from \"crypto-js\";\n\nexport function encryptMessage(message, type, groupId){\n    var messageJSON = {\"message\": message, \"type\":type}\n    var messageString = JSON.stringify(messageJSON);\n    const groupPrivateKey = localStorage.getItem(`${groupId}-privateKey`);\n    const encrypted = CryptoJS.AES.encrypt(messageString, groupPrivateKey).toString();\n    return encrypted;\n}\n\nexport function decryptMessage(message, groupId){\n    const groupPrivateKey = localStorage.getItem(`${groupId}-privateKey`);\n    const decrypt = CryptoJS.AES.decrypt(message, groupPrivateKey);\n    return JSON.parse(decrypt.toString(CryptoJS.enc.Utf8));\n}\n\nexport function encryptMessageForPrivateKey(message, user){\n    var crypt = new JSEncrypt();\n    crypt.setPublicKey(user.publicKey);\n    const encrypted = crypt.encrypt(message);\n    return encrypted;\n}\n\nexport function decryptMessageForPrivateKey(message){\n    var crypt = new JSEncrypt();\n    crypt.setPrivateKey(localStorage.getItem('user-privateKey'));\n    const decrypted = crypt.decrypt(message);\n    return decrypted;\n}\n","import React, { useEffect, useState } from 'react';\n\nimport {\n  gql,\n  useQuery\n} from '@apollo/client';\n\nimport { ChatList, ChatListItem, Avatar, Column, Row, Title, Subtitle } from '@livechat/ui-kit'\n\nimport { decryptMessageForPrivateKey } from '../utils/AESEncryption';\n\nconst GET_GROUPS = gql`\n  query getGroupsWithUser($username: String!) {\n    groupsByUser(username: $username){\n      id\n      name\n      users {\n        username\n      }\n      privateKey\n    }\n  }\n`;\n\nconst GROUP_SUBSCRIPTION = gql`\n    subscription getNewGroups($username: String!){\n        newGroup(username: $username){\n          id\n          users{\n            username\n          }\n          name\n          publicKey\n          privateKey\n        }\n    }\n`;\n\nfunction ChatLeftList({ selectedGroup, setSelectedGroup, setDoneFetching, client }) {\n  const username = localStorage.getItem('username');\n  const [firstLoad, setFirstLoad] = useState(false);\n\n  const {\n    subscribeToMore,\n    loading,\n    error,\n    data, \n    refetch\n  } = useQuery(GET_GROUPS, {\n    variables: {\n      username\n    }\n  });\n\n  const subscribeToNewMessages = () => {\n    subscribeToMore({\n      document: GROUP_SUBSCRIPTION,\n      variables: { username },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const newGroup = subscriptionData.data.newGroup;\n        localStorage.setItem(`${newGroup.id}-privateKey`, decryptMessageForPrivateKey(newGroup.privateKey));\n        return Object.assign({}, prev, {\n          groupsByUser: [newGroup, ...prev.groupsByUser]\n        });\n      }\n    })\n  };\n\n  useEffect(() => {\n    if (!firstLoad) {\n      setFirstLoad(true);\n      subscribeToNewMessages();\n    }\n  }, [firstLoad]);\n\n\n  if (loading) return 'Loading...';\n  if (error){\n    client.resetStore();\n    refetch();\n    return `Error! ${error.message}`;\n  }\n\n  const groupDivs = data.groupsByUser.map(group => {\n    if (localStorage.getItem(`${group.id}-privateKey`) == null || localStorage.getItem(`${group.id}-privateKey`) == 'undefined') {\n      localStorage.setItem(`${group.id}-privateKey`, decryptMessageForPrivateKey(group.privateKey));\n    }\n    const users = group.users.map(user => `@${user.username}`);\n    return (\n      <div key={group.id} onClick={() => { setSelectedGroup(group.id); setDoneFetching(false) }}>\n        <ChatListItem active={group.id === selectedGroup}>\n          <Avatar letter={group.name.charAt(0).toUpperCase()} />\n          <Column fill=\"true\">\n            <Row justify>\n              <Title ellipsis>{group.name}</Title>\n            </Row>\n            <Row justify>\n              <Subtitle ellipsis>{users.join(\", \")}</Subtitle>\n            </Row>\n          </Column>\n        </ChatListItem>\n      </div>\n    )\n  });\n\n  return (<ChatList style={{ maxWidth: '100%' }}>\n    {groupDivs}\n  </ChatList>);\n}\n\nexport default ChatLeftList;","import React, { useEffect, useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { ChatFeed as ChatFeedUI, Message } from 'react-chat-ui';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { css } from \"@emotion/core\";\nimport { gql, useMutation } from '@apollo/client';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {encryptMessage, decryptMessage, decryptMessageForPrivateKey} from '../utils/AESEncryption';\nimport {encryptLocalStorage} from '../utils/localStorageKeyGen';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\nconst SEND_MESSAGE = gql`\n    mutation SendMessage($username: String!, $content: String!, $gid: Int!, $cType: String!){\n        createMessage(sender:$username, group:$gid, content:$content, cType:$cType){\n            id\n            content\n            ts\n        }\n    }\n`;\n\nfunction ChatFeed({\n    entries,\n    onLoadMore,\n    doneFetching,\n    subscribeToNewMessages,\n    selectedGroup\n}) {\n    const [firstLoad, setFirstLoad] = useState(true);\n    const [messageInput, setMessageInput] = useState(\"\");\n    const [createMessage] = useMutation(SEND_MESSAGE);\n    let messagesEndRef = React.createRef();\n    let messagesStartRef = React.createRef();\n\n    window.lm = onLoadMore;\n    const reversedEntries = [].concat(entries.messagesByGroup).reverse();\n    const username = localStorage.getItem('username');\n    const messages = reversedEntries.map(message => {\n        console.log(message);\n        if (localStorage.getItem(`${selectedGroup}-privateKey`) == null || localStorage.getItem(`${selectedGroup}-privateKey`) === 'undefined'){\n            return null;\n        }\n        return new Message({ id: message.sender === username ? 0 : message.sender, message: decryptMessage(message.content, selectedGroup).message, senderName: `@${message.sender}` })\n    }).filter(Boolean);\n\n    useEffect(() => {\n        if (firstLoad) {\n            messagesEndRef.scrollIntoView({ behavior: \"smooth\" });\n            subscribeToNewMessages();\n            setFirstLoad(false);\n        }\n        setInterval(() => {\n            const offset = 0;\n            if (!messagesStartRef) return false;\n            const top = messagesStartRef.getBoundingClientRect().top;\n            const inView = (top + offset) >= 0 && (top - offset) <= window.innerHeight;\n            if (inView && !doneFetching) {\n                onLoadMore();\n            }\n        }, 1000);\n    }, [firstLoad, setFirstLoad, onLoadMore, messagesStartRef, messagesEndRef]);\n    return <div style={{ marginLeft: '10px', marginRight: '10px', marginBottom: '50px' }}>\n        <div style={{ height: '30px' }}\n            ref={(el) => { messagesStartRef = el; }}>\n            {\n                !doneFetching && <ClipLoader\n                    css={override}\n                    size={30}\n                    color={\"#123abc\"}\n                    loading={true}\n                />\n            }\n        </div>\n        <ChatFeedUI\n            messages={messages}\n            showSenderName\n            bubblesCentered={false}\n            bubbleStyles={\n                {\n                    text: {\n                        fontSize: 14\n                    },\n                    chatbubble: {\n                        borderRadius: 30,\n                        padding: 15\n                    }\n                }\n            }\n        />\n        <div style={{ float: \"left\", clear: \"both\" }}\n            ref={(el) => { messagesEndRef = el; }}>\n        </div>\n        <Form style={{ width: \"68%\", bottom: \"20px\", position: \"fixed\" }}>\n            <Form.Group>\n                <Form.Control type=\"text\" placeholder=\"Enter message\" value={messageInput} onChange={e => setMessageInput(e.target.value)} onKeyPress={event => {\n                if (event.key === 'Enter') {\n                    event.preventDefault()\n                    createMessage({ variables: { username, gid: selectedGroup, content: encryptMessage(messageInput, \"text\", selectedGroup), cType: \"text\" } });\n                }\n              }}/>\n            </Form.Group>\n        </Form>\n    </div>;\n}\n\nexport default ChatFeed;","import React from 'react';\n\nimport {\n    gql,\n    useQuery\n} from '@apollo/client';\nimport { css } from \"@emotion/core\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport ChatFeed from './ChatFeed.react';\n\nconst GET_MESSAGES = gql`\n    query getMessagesForGroup($gid: Int!, $offset: Int, $limit: Int) {\n        messagesByGroup(gid: $gid, count: $limit, offset: $offset){\n            id\n            content\n            ts\n            sender\n            cType\n        }\n    }\n`;\n\nconst MESSAGE_SUBSCRIPTION = gql`\n    subscription getNewMessages($gid: Int!){\n        newMessage(gid: $gid){\n            id\n            content\n            ts\n            sender\n            cType\n        }\n    }\n`;\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nfunction ChatMessages({\n    selectedGroup, doneFetching, setDoneFetching\n}) {\n    const { subscribeToMore, loading, error, data, fetchMore } = useQuery(\n        GET_MESSAGES,\n        {\n            variables: {\n                gid: selectedGroup,\n                offset: 0,\n                limit: 50\n            },\n            fetchPolicy: \"cache-and-network\"\n        }\n    );\n    if (loading) return (<div style={{ marginLeft: '10px', marginRight: '10px', marginBottom: '50px' }}>\n        <div style={{ height: '30px' }}>\n            {\n                !doneFetching && <ClipLoader\n                    css={override}\n                    size={30}\n                    color={\"#123abc\"}\n                    loading={true}\n                />\n            }\n        </div>\n    </div>);\n    if (error) return `Error! ${error.message}`;\n    return <ChatFeed entries={data} selectedGroup={selectedGroup} doneFetching={doneFetching} onLoadMore={() => {\n        if (doneFetching) {\n            return;\n        }\n        return fetchMore({\n            variables: {\n                offset: data.messagesByGroup.length\n            },\n            updateQuery: (prev, { fetchMoreResult }) => {\n                if (fetchMoreResult.messagesByGroup.length === 0) {\n                    setDoneFetching(true);\n                }\n                return Object.assign({}, prev, {\n                    messagesByGroup: [...prev.messagesByGroup, ...fetchMoreResult.messagesByGroup],\n                });\n            }\n        })\n    }}\n        subscribeToNewMessages={() =>\n            subscribeToMore({\n                document: MESSAGE_SUBSCRIPTION,\n                variables: { gid: selectedGroup },\n                updateQuery: (prev, { subscriptionData }) => {\n                    if (!subscriptionData.data) return prev;\n                    const newFeedItem = subscriptionData.data.newMessage;\n                    return Object.assign({}, prev, {\n                        messagesByGroup: [newFeedItem, ...prev.messagesByGroup]\n                    });\n                }\n            })\n        }\n    >\n    </ChatFeed>;\n}\n\nexport default ChatMessages;","import React, { useState } from 'react';\nimport TagsInput from 'react-tagsinput'\nimport 'react-tagsinput/react-tagsinput.css'\nimport { gql, useMutation } from '@apollo/client';\nimport { generateGroupKeys } from '../utils/generateKeys'\nimport { encryptMessageForPrivateKey } from '../utils/AESEncryption';\nimport {encryptLocalStorage} from '../utils/localStorageKeyGen';\n\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst CREATE_GROUP = gql`\nmutation createGroup($name: String!, $publicKey: String!, $users: [String!]){\n    createGroup(name:$name, publicKey:$publicKey, users:$users){\n      id\n      name\n      publicKey\n      users{\n          username\n          publicKey\n      }\n    }\n  }\n`;\n\nconst SEND_MESSAGE = gql`\n    mutation createPrivateKey($username: String!, $privateKey: String!, $gid: Int!){\n        createPrivateKey(username:$username, gid:$gid, privateKey:$privateKey){\n            id\n            privateKey\n        }\n    }\n`;\n\nconst UPDATE_KEYS = gql`\n    mutation updateKeys($username: String!, $keys: String!){\n        updateKeys(username:$username, keys:$keys){\n            success\n        }\n    }\n`;\n\nfunction GroupChatTags({ show, setShow }) {\n    const [tags, setTags] = useState([]);\n\n    const handleClose = () => setShow(false);\n    const [groupName, setgroupName] = useState(\"\");\n    const [updateKeys] = useMutation(UPDATE_KEYS);\n    const [createPrivateKey] = useMutation(SEND_MESSAGE);\n    const [createGroup] = useMutation(CREATE_GROUP, {\n        onCompleted({ createGroup }) {\n            const username = localStorage.getItem('username');\n            const privateKey = localStorage.getItem('temp-group-privatekey')\n            localStorage.setItem(`${createGroup.id}-privateKey`, privateKey);\n            localStorage.removeItem('temp-group-privatekey');\n            createGroup.users.map(user => {\n                const content = encryptMessageForPrivateKey(privateKey, user);\n                createPrivateKey({ variables: { username: user.username, gid: createGroup.id, privateKey: content} });\n                return true;\n            });\n            updateKeys({variables: {username, keys: encryptLocalStorage()}});\n            handleClose();\n        }\n    });\n\n    const createGroupChat = (raw_tags, groupName) => {\n        raw_tags.push(localStorage.getItem('username')) // transparently include current user in every group they create\n        function onlyUnique(value, index, self) {\n            return self.indexOf(value) === index;\n        }\n        var tags = raw_tags.filter(onlyUnique);\n        if (tags && tags.length > 0) {\n            const x = Promise.resolve(generateGroupKeys(groupName)).then(function (array) {\n                const publicKey = array.publicKey\n                const privateKey = array.privateKey\n                localStorage.setItem('temp-group-privatekey', privateKey);\n                createGroup({ variables: { users: tags, publicKey: publicKey, name: groupName } });\n            });\n        }\n        else {\n            console.log(\"Error, you have no individuals to add to the group\")\n        }\n    }\n\n    return (\n        <div>\n            <Modal show={show} transparent={\"true\"} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Input the individuals to add to your new Group Chat!</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <TagsInput value={tags} onChange={(newTags) => setTags(newTags)} inputProps={{\n                        className: 'react-tagsinput-input',\n                        placeholder: 'Add people!'\n                    }} onlyUnique />\n                    <Form style={{marginTop: \"20px\"}}>\n                        <Form.Group>\n                            <Form.Control type=\"text\" placeholder=\"GroupName\" value={groupName} onChange={(e) => setgroupName(e.target.value)} />\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                        <Button variant=\"primary\" onClick={() => createGroupChat(tags, groupName)}>\n                            Create Group!\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>);\n}\nexport default GroupChatTags;\n","import React, { useState } from 'react';\nimport ChatLeftList from './ChatLeftList.react';\nimport ChatMessages from './ChatMessages.react';\nimport Button from 'react-bootstrap/Button';\nimport './../App.css';\n\nimport { ThemeProvider, darkTheme, elegantTheme, purpleTheme, defaultTheme } from '@livechat/ui-kit'\nimport GroupChatTags from './GroupChatTags.react';\n\nconst themes = {\n    defaultTheme: {\n        FixedWrapperMaximized: {\n            css: {\n                boxShadow: '0 0 1em rgba(0, 0, 0, 0.1)',\n            },\n        },\n        OwnMessage: {\n            ...defaultTheme.OwnMessage,\n            backgroundColor: '#456456',\n            secondaryTextColor: '#456456',\n        },\n    },\n    purpleTheme: {\n        ...purpleTheme,\n        TextComposer: {\n            ...purpleTheme.TextComposer,\n            css: {\n                ...purpleTheme.TextComposer.css,\n                marginTop: '1em',\n            },\n        },\n        OwnMessage: {\n            ...purpleTheme.OwnMessage,\n            secondaryTextColor: '#fff',\n        },\n    },\n    elegantTheme: {\n        ...elegantTheme,\n        Message: {\n            ...darkTheme.Message,\n            secondaryTextColor: '#fff',\n        },\n        OwnMessage: {\n            ...darkTheme.OwnMessage,\n            secondaryTextColor: '#fff',\n        },\n    },\n    darkTheme: {\n        ...darkTheme,\n        Message: {\n            ...darkTheme.Message,\n            css: {\n                ...darkTheme.Message.css,\n                color: '#fff',\n            },\n        },\n        OwnMessage: {\n            ...darkTheme.OwnMessage,\n            secondaryTextColor: '#fff',\n        },\n        TitleBar: {\n            ...darkTheme.TitleBar,\n            css: {\n                ...darkTheme.TitleBar.css,\n                padding: '1em',\n            },\n        },\n    },\n}\n\nfunction ChatMain({client}) {\n    const [selectedGroup, setSelectedGroup] = useState(null);\n    const [doneFetching, setDoneFetching] = useState(false)\n    const [show, setShow] = useState(false);\n\n    const logout = () => {\n        localStorage.clear();\n        let fullURL = window.location.href.split('/');\n        fullURL.pop();\n        const baseURL = fullURL.join('/')\n        window.location.href = baseURL;\n    }\n\n    return (<>\n    <GroupChatTags show={show} setShow={setShow} />\n        <ThemeProvider theme={themes.defaultTheme}>\n            <div style={{\n                height: \"100%\",\n                width: \"30%\",\n                position: \"fixed\",\n                zIndex: 1,\n                top: 0,\n                overflowX: 'hidden',\n                paddingTop: '20px',\n                left: 0\n            }}>\n                <div className=\"App\">\n                    <Button variant=\"primary\" style={{ marginRight: \"10px\" }} onClick={() => setShow(!show)}>Create Group Chat</Button>\n                    <Button variant=\"secondary\" onClick={logout}>Logout</Button>\n                </div>\n                <ChatLeftList client={client} selectedGroup={selectedGroup} setSelectedGroup={setSelectedGroup} setDoneFetching={setDoneFetching}>\n                </ChatLeftList>\n            </div>\n\n            <div style={{\n                height: \"100%\",\n                width: \"70%\",\n                position: \"fixed\",\n                zIndex: 1,\n                top: 0,\n                overflowX: 'hidden',\n                paddingTop: '20px',\n                right: 0,\n                border: \"1px solid rgba(0,0,0,0.1)\",\n            }}>\n                {\n                    selectedGroup && <ChatMessages selectedGroup={selectedGroup} doneFetching={doneFetching} setDoneFetching={setDoneFetching}></ChatMessages>\n                }\n            </div>\n        </ThemeProvider>\n    </>);\n}\n\nexport default ChatMain;","import React from 'react';\nimport './App.css';\nimport Register from './components/register.react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  HashRouter\n} from \"react-router-dom\";\nimport { ApolloClient, InMemoryCache, createHttpLink, ApolloProvider } from '@apollo/client';\nimport ChatMain from './components/ChatMain.react';\nimport { setContext } from '@apollo/client/link/context';\nimport { split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws';\n\nfunction App() {\n  const PRODUCTION = window.location.href.includes(\"https://rithik.me/\");\n  const serverURL = PRODUCTION ? 'https://e2-chat.herokuapp.com' : 'http://localhost:4000';\n  const wsURL = PRODUCTION ? 'wss://e2-chat.herokuapp.com' : 'ws://localhost:4000';\n  const token = localStorage.getItem('token');\n  const httpLink = createHttpLink({\n    uri: `${serverURL}/graphql`,\n  });\n\n  const authLink = setContext((_, { headers }) => {\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `${token}` : \"\",\n      }\n    }\n  });\n  \n  const wsLink = new WebSocketLink({\n    uri: `${wsURL}/graphql`,\n    options: {\n      reconnect: true,\n      connectionParams: {\n        Authorization: token,\n      },\n    }\n  });\n  \n  const splitLink = split(\n    ({ query }) => {\n      const definition = getMainDefinition(query);\n      return (\n        definition.kind === 'OperationDefinition' &&\n        definition.operation === 'subscription'\n      );\n    },\n    wsLink,\n    authLink.concat(httpLink),\n  );\n\n  const client = new ApolloClient({\n    link: splitLink,\n    cache: new InMemoryCache()\n  });\n\n  return (\n    <HashRouter basename='/'>\n      <Switch>\n        <Route path=\"/main\">\n          <ApolloProvider client={client}>\n            <div>\n              <ChatMain client={client}/>\n            </div>\n          </ApolloProvider>\n        </Route>\n        <Route path=\"/\">\n        <ApolloProvider client={client}>\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <Register />\n            </header>\n          </div>\n         </ApolloProvider>\n        </Route>\n      </Switch>\n    </HashRouter>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}