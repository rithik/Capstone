{"version":3,"sources":["utils/AESEncryption.js","components/ChatLeftList.react.js","components/ChatFeed.react.js","components/ChatMessages.react.js","utils/generateKeys.tsx","utils/localStorageKeyGen.ts","components/GroupChatTags.react.js","components/ChatMain.react.js","components/ChatMainApolloProvider.react.js","components/register.react.js","components/RegisterApolloProvider.react.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["encryptMessage","message","type","groupId","messageJSON","messageString","JSON","stringify","groupPrivateKey","localStorage","getItem","CryptoJS","AES","encrypt","toString","decryptMessage","decrypt","parse","enc","Utf8","decryptMessageForPrivateKey","crypt","JSEncrypt","setPrivateKey","GET_GROUPS","gql","GROUP_SUBSCRIPTION","ChatLeftList","selectedGroup","setSelectedGroup","setDoneFetching","client","username","useQuery","variables","subscribeToMore","loading","error","data","refetch","useEffect","subscribe","document","updateQuery","prev","subscriptionData","newGroup","setItem","id","privateKey","Object","assign","groupsByUser","resetStore","groupDivs","map","group","users","user","key","onClick","active","letter","name","charAt","toUpperCase","fill","justify","ellipsis","join","style","maxWidth","override","css","SEND_MESSAGE","ChatFeed","entries","onLoadMore","doneFetching","useState","messageInput","setMessageInput","useMutation","createMessage","messagesEndRef","React","createRef","messagesStartRef","window","lm","reversedEntries","concat","messagesByGroup","reverse","messages","Message","sender","content","senderName","filter","Boolean","scrollIntoView","behavior","interval","setInterval","top","getBoundingClientRect","innerHeight","clearInterval","marginLeft","marginRight","marginBottom","height","ref","el","size","color","showSenderName","bubblesCentered","bubbleStyles","text","fontSize","chatbubble","borderRadius","padding","float","clear","Form","width","bottom","position","Group","Control","placeholder","value","onChange","e","target","onKeyPress","event","preventDefault","gid","cType","GET_MESSAGES","MESSAGE_SUBSCRIPTION","ChatMessages","subscriptions","setSubscriptions","offset","limit","fetchPolicy","fetchMore","subscription","console","log","newFeedItem","newMessage","length","fetchMoreResult","ab2str","buf","String","fromCharCode","apply","Array","from","Uint8Array","exportCryptoPublicKey","a","crypto","subtle","exportKey","exported","exportedAsString","exportedAsBase64","btoa","pemExported","exportCryptoPrivateKey","generateKeys","modulus","generateKey","modulusLength","publicExponent","hash","then","keyPair","publicKey","response","generatePasswordHash","password","pbkdf2","pbkdf2Sync","encryptLocalStorage","localStorageString","hashedPassword","setLocalStorage","localStorageDict","CREATE_GROUP","UPDATE_KEYS","GroupChatTags","show","setShow","tags","setTags","handleClose","groupName","setgroupName","updateKeys","createPrivateKey","onCompleted","createGroup","removeItem","setPublicKey","encryptMessageForPrivateKey","keys","Modal","transparent","onHide","Header","closeButton","Title","Body","newTags","inputProps","className","onlyUnique","marginTop","Footer","Button","variant","raw_tags","push","index","self","indexOf","Promise","resolve","array","createGroupChat","themes","defaultTheme","FixedWrapperMaximized","boxShadow","OwnMessage","backgroundColor","secondaryTextColor","purpleTheme","TextComposer","elegantTheme","darkTheme","TitleBar","ChatMain","theme","zIndex","overflowX","paddingTop","left","fullURL","location","href","split","pop","baseURL","right","border","ChatMainApolloProvider","PRODUCTION","includes","serverURL","wsURL","token","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","wsLink","WebSocketLink","options","reconnect","connectionParams","Authorization","splitLink","query","definition","getMainDefinition","kind","operation","ApolloClient","link","cache","InMemoryCache","CREATE_USER","CREATE_TOKEN","GET_USER","Register","createUser","createToken","tab","loginPassword","registerPassword","createLoginToken","registerUsername","setRegisterUsername","setRegisterPassword","loginUsername","setLoginUsername","setLoginPassword","registerUsernameError","setRegisterUsernameError","loginError","setLoginError","buttonPressed","setButtonPressed","setTab","setKeys","myUsernameValue","registerUser","userData","loginUser","Tabs","activeKey","onSelect","k","Tab","eventKey","title","TextField","InputProps","label","fullWidth","disabled","CircularProgress","Collapse","in","Alert","action","IconButton","aria-label","severity","RegisterApolloProvider","App","basename","path","hostname","match","ReactDOM","render","Fragment","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.65ead45b.chunk.js","sourcesContent":["import JSEncrypt from 'jsencrypt';\nimport CryptoJS from \"crypto-js\";\n\nexport function encryptMessage(message, type, groupId){\n    var messageJSON = {\"message\": message, \"type\":type}\n    var messageString = JSON.stringify(messageJSON);\n    const groupPrivateKey = localStorage.getItem(`${groupId}-privateKey`);\n    const encrypted = CryptoJS.AES.encrypt(messageString, groupPrivateKey).toString();\n    return encrypted;\n}\n\nexport function decryptMessage(message, groupId){\n    const groupPrivateKey = localStorage.getItem(`${groupId}-privateKey`);\n    const decrypt = CryptoJS.AES.decrypt(message, groupPrivateKey);\n    return JSON.parse(decrypt.toString(CryptoJS.enc.Utf8));\n}\n\nexport function encryptMessageForPrivateKey(message, user){\n    var crypt = new JSEncrypt();\n    crypt.setPublicKey(user.publicKey);\n    const encrypted = crypt.encrypt(message);\n    return encrypted;\n}\n\nexport function decryptMessageForPrivateKey(message){\n    var crypt = new JSEncrypt();\n    crypt.setPrivateKey(localStorage.getItem('user-privateKey'));\n    const decrypted = crypt.decrypt(message);\n    return decrypted;\n}\n","import React, { useEffect } from 'react';\n\nimport {\n  gql,\n  useQuery\n} from '@apollo/client';\n\nimport { ChatList, ChatListItem, Avatar, Column, Row, Title, Subtitle } from '@livechat/ui-kit'\n\nimport { decryptMessageForPrivateKey } from '../utils/AESEncryption';\n\nconst GET_GROUPS = gql`\n  query getGroupsWithUser($username: String!) {\n    groupsByUser(username: $username){\n      id\n      name\n      users {\n        username\n      }\n      privateKey\n    }\n  }\n`;\n\nconst GROUP_SUBSCRIPTION = gql`\n    subscription getNewGroups($username: String!){\n        newGroup(username: $username){\n          id\n          users{\n            username\n          }\n          name\n          publicKey\n          privateKey\n        }\n    }\n`;\n\nfunction ChatLeftList({ selectedGroup, setSelectedGroup, setDoneFetching, client }) {\n  const username = localStorage.getItem('username');\n\n  const {\n    subscribeToMore,\n    loading,\n    error,\n    data,\n    refetch\n  } = useQuery(GET_GROUPS, {\n    variables: {\n      username\n    }\n  });\n\n  useEffect(() => {\n    const subscribe = subscribeToMore({\n      document: GROUP_SUBSCRIPTION,\n      variables: { username },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const newGroup = subscriptionData.data.newGroup;\n        localStorage.setItem(`${newGroup.id}-privateKey`, decryptMessageForPrivateKey(newGroup.privateKey));\n        return Object.assign({}, prev, {\n          groupsByUser: [newGroup, ...prev.groupsByUser]\n        });\n      }\n    });\n    return function cleanup() {\n      subscribe();\n    };\n  }, [subscribeToMore, username]);\n\n\n  if (loading) return 'Loading...';\n  if (error) {\n    client.resetStore();\n    refetch();\n    return `Error! ${error.message}`;\n  }\n\n  const groupDivs = data.groupsByUser.map(group => {\n    if (localStorage.getItem(`${group.id}-privateKey`) == null || localStorage.getItem(`${group.id}-privateKey`) === 'undefined') {\n      localStorage.setItem(`${group.id}-privateKey`, decryptMessageForPrivateKey(group.privateKey));\n    }\n    const users = group.users.map(user => `@${user.username}`);\n    return (\n      <div key={group.id} onClick={() => { setSelectedGroup(group.id); setDoneFetching(false) }}>\n        <ChatListItem active={group.id === selectedGroup}>\n          <Avatar letter={group.name.charAt(0).toUpperCase()} />\n          <Column fill=\"true\">\n            <Row justify>\n              <Title ellipsis>{group.name}</Title>\n            </Row>\n            <Row justify>\n              <Subtitle ellipsis>{users.join(\", \")}</Subtitle>\n            </Row>\n          </Column>\n        </ChatListItem>\n      </div>\n    )\n  });\n\n  return (<ChatList style={{ maxWidth: '100%' }}>\n    {groupDivs}\n  </ChatList>);\n}\n\nexport default ChatLeftList;","import React, { useEffect, useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { ChatFeed as ChatFeedUI, Message } from 'react-chat-ui';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { css } from \"@emotion/core\";\nimport { gql, useMutation } from '@apollo/client';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { encryptMessage, decryptMessage } from '../utils/AESEncryption';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\nconst SEND_MESSAGE = gql`\n    mutation SendMessage($username: String!, $content: String!, $gid: Int!, $cType: String!){\n        createMessage(sender:$username, group:$gid, content:$content, cType:$cType){\n            id\n            content\n            ts\n        }\n    }\n`;\n\nfunction ChatFeed({\n    entries,\n    onLoadMore,\n    doneFetching,\n    selectedGroup,\n}) {\n    const [messageInput, setMessageInput] = useState(\"\");\n    const [createMessage] = useMutation(SEND_MESSAGE);\n    let messagesEndRef = React.createRef();\n    let messagesStartRef = React.createRef();\n\n    window.lm = onLoadMore;\n    const reversedEntries = [].concat(entries.messagesByGroup).reverse();\n    const username = localStorage.getItem('username');\n    const messages = reversedEntries.map(message => {\n        if (localStorage.getItem(`${selectedGroup}-privateKey`) == null || localStorage.getItem(`${selectedGroup}-privateKey`) === 'undefined') {\n            return null;\n        }\n        return new Message({ id: message.sender === username ? 0 : message.sender, message: decryptMessage(message.content, selectedGroup).message, senderName: `@${message.sender}` })\n    }).filter(Boolean);\n\n\n    useEffect(() => {\n        messagesEndRef.scrollIntoView({ behavior: \"smooth\" });\n        const interval = setInterval(() => {\n            const offset = 0;\n            if (!messagesStartRef) return false;\n            const top = messagesStartRef.getBoundingClientRect().top;\n            const inView = (top + offset) >= 0 && (top - offset) <= window.innerHeight;\n            if (inView) {\n                onLoadMore();\n            }\n        }, 1000);\n        return function cleanup(){\n            clearInterval(interval);\n        }\n    }, [onLoadMore, messagesStartRef, messagesEndRef]);\n\n    return <div style={{ marginLeft: '10px', marginRight: '10px', marginBottom: '50px' }}>\n        <div style={{ height: '30px' }}\n            ref={(el) => { messagesStartRef = el; }}>\n            {\n                !doneFetching && <ClipLoader\n                    css={override}\n                    size={30}\n                    color={\"#123abc\"}\n                    loading={true}\n                />\n            }\n        </div>\n        <ChatFeedUI\n            messages={messages}\n            showSenderName\n            bubblesCentered={false}\n            bubbleStyles={\n                {\n                    text: {\n                        fontSize: 14\n                    },\n                    chatbubble: {\n                        borderRadius: 30,\n                        padding: 15\n                    }\n                }\n            }\n        />\n        <div style={{ float: \"left\", clear: \"both\" }}\n            ref={(el) => { messagesEndRef = el; }}>\n        </div>\n        <Form style={{ width: \"68%\", bottom: \"20px\", position: \"fixed\" }}>\n            <Form.Group>\n                <Form.Control type=\"text\" placeholder=\"Enter message\" value={messageInput} onChange={e => setMessageInput(e.target.value)} onKeyPress={event => {\n                    if (event.key === 'Enter') {\n                        event.preventDefault()\n                        createMessage({ variables: { username, gid: selectedGroup, content: encryptMessage(messageInput, \"text\", selectedGroup), cType: \"text\" } });\n                    }\n                }} />\n            </Form.Group>\n        </Form>\n    </div>;\n}\n\nexport default ChatFeed;","import React, { useEffect } from 'react';\n\nimport {\n    gql,\n    useQuery\n} from '@apollo/client';\nimport { css } from \"@emotion/core\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport ChatFeed from './ChatFeed.react';\n\nconst GET_MESSAGES = gql`\n    query getMessagesForGroup($gid: Int!, $offset: Int, $limit: Int) {\n        messagesByGroup(gid: $gid, count: $limit, offset: $offset){\n            id\n            content\n            ts\n            sender\n            group\n            cType\n        }\n    }\n`;\n\nconst MESSAGE_SUBSCRIPTION = gql`\n    subscription getNewMessages($gid: Int!){\n        newMessage(gid: $gid){\n            id\n            content\n            ts\n            sender\n            group\n            cType\n        }\n    }\n`;\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nfunction ChatMessages({\n    selectedGroup, doneFetching, setDoneFetching, subscriptions, setSubscriptions\n}) {\n    const { subscribeToMore, loading, error, data, fetchMore } = useQuery(\n        GET_MESSAGES,\n        {\n            variables: {\n                gid: selectedGroup,\n                offset: 0,\n                limit: 50\n            },\n            fetchPolicy: \"cache-and-network\"\n        }\n    );\n\n    useEffect(() => {\n        const subscription = subscribeToMore({\n            document: MESSAGE_SUBSCRIPTION,\n            variables: { gid: selectedGroup },\n            updateQuery: (prev, { subscriptionData }) => {\n                if (!subscriptionData.data) return prev;\n                console.log(subscriptionData, selectedGroup);\n                const newFeedItem = subscriptionData.data.newMessage;\n                return Object.assign({}, prev, {\n                    messagesByGroup: [newFeedItem, ...prev.messagesByGroup]\n                });\n            }\n        });\n        return function cleanup() {\n            subscription();\n        };\n    }, [subscribeToMore, selectedGroup]);\n\n    if (loading) return (<div style={{ marginLeft: '10px', marginRight: '10px', marginBottom: '50px' }}>\n        <div style={{ height: '30px' }}>\n            {\n                !doneFetching && <ClipLoader\n                    css={override}\n                    size={30}\n                    color={\"#123abc\"}\n                    loading={true}\n                />\n            }\n        </div>\n    </div>);\n    if (error) return `Error! ${error.message}`;\n    return <ChatFeed entries={data} selectedGroup={selectedGroup} doneFetching={doneFetching} onLoadMore={() => {\n        if (doneFetching) {\n            return;\n        }\n        return fetchMore({\n            variables: {\n                offset: data.messagesByGroup.length\n            },\n            updateQuery: (prev, { fetchMoreResult }) => {\n                if (fetchMoreResult.messagesByGroup.length === 0) {\n                    setDoneFetching(true);\n                }\n                return Object.assign({}, prev, {\n                    messagesByGroup: [...prev.messagesByGroup, ...fetchMoreResult.messagesByGroup],\n                });\n            }\n        })\n    }}>\n    </ChatFeed>;\n}\n\nexport default ChatMessages;","import '../App.css';\nimport pbkdf2 from 'pbkdf2';\n\nfunction ab2str(buf: any) {\n    return String.fromCharCode.apply(null, Array.from(new Uint8Array(buf)));\n}\n\nasync function exportCryptoPublicKey(key: any) {\n    const exported = await window.crypto.subtle.exportKey(\n        \"spki\",\n        key\n    );\n    const exportedAsString = ab2str(exported);\n    const exportedAsBase64 = window.btoa(exportedAsString);\n    const pemExported = `-----BEGIN PUBLIC KEY-----\\n${exportedAsBase64}\\n-----END PUBLIC KEY-----`;\n    return pemExported;\n}\n\nasync function exportCryptoPrivateKey(key: any) {\n    const exported = await window.crypto.subtle.exportKey(\n        \"pkcs8\",\n        key\n    );\n    const exportedAsString = ab2str(exported);\n    const exportedAsBase64 = window.btoa(exportedAsString);\n    const pemExported = `-----BEGIN PRIVATE KEY-----\\n${exportedAsBase64}\\n-----END PRIVATE KEY-----`;\n    return pemExported;\n}\n\n\nexport async function generateKeys(username: string, modulus: number) {\n    const response = await window.crypto.subtle.generateKey({\n        name: \"RSA-OAEP\",\n        modulusLength: modulus,\n        publicExponent: new Uint8Array([1, 0, 1]),\n        hash: \"SHA-256\",\n    },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    ).then(async (keyPair) => {\n        const publicKey = await exportCryptoPublicKey(keyPair.publicKey);\n        const privateKey = await exportCryptoPrivateKey(keyPair.privateKey);\n        return {\n            privateKey,\n            username,\n            publicKey\n        }\n    });\n    return response;\n}\n\n\nexport function generatePasswordHash(password: string){\n    var derivedKey = pbkdf2.pbkdf2Sync(password, 'salt', 1, 32, 'sha512').toString('hex');\n    return derivedKey;\n}","import CryptoJS from \"crypto-js\";\n\nexport function encryptLocalStorage() {\n    const localStorageString = JSON.stringify(localStorage);\n    const hashedPassword: string = localStorage.getItem('password') || '';\n    const encrypted = CryptoJS.AES.encrypt(localStorageString, hashedPassword).toString();\n    return encrypted;\n}\n\nexport function setLocalStorage(localStorageString: string, hashedPassword: string) {\n    const decrypt = CryptoJS.AES.decrypt(localStorageString, hashedPassword);\n    try{\n        const localStorageDict = JSON.parse(decrypt.toString(CryptoJS.enc.Utf8));\n        for (const [key, value] of Object.entries(localStorageDict)) {\n            localStorage.setItem(key, (value as string));\n        }\n    }\n    catch(e){\n        console.error(e);\n        return false;\n    }\n    return true;\n}","import React, { useState } from 'react';\nimport TagsInput from 'react-tagsinput'\nimport 'react-tagsinput/react-tagsinput.css'\nimport { gql, useMutation } from '@apollo/client';\nimport { generateKeys } from '../utils/generateKeys'\nimport { encryptMessageForPrivateKey } from '../utils/AESEncryption';\nimport {encryptLocalStorage} from '../utils/localStorageKeyGen';\n\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst CREATE_GROUP = gql`\nmutation createGroup($name: String!, $publicKey: String!, $users: [String!]){\n    createGroup(name:$name, publicKey:$publicKey, users:$users){\n      id\n      name\n      publicKey\n      users{\n          username\n          publicKey\n      }\n    }\n  }\n`;\n\nconst SEND_MESSAGE = gql`\n    mutation createPrivateKey($username: String!, $privateKey: String!, $gid: Int!){\n        createPrivateKey(username:$username, gid:$gid, privateKey:$privateKey){\n            id\n            privateKey\n        }\n    }\n`;\n\nconst UPDATE_KEYS = gql`\n    mutation updateKeys($username: String!, $keys: String!){\n        updateKeys(username:$username, keys:$keys){\n            success\n        }\n    }\n`;\n\nfunction GroupChatTags({ show, setShow }) {\n    const [tags, setTags] = useState([]);\n\n    const handleClose = () => setShow(false);\n    const [groupName, setgroupName] = useState(\"\");\n    const [updateKeys] = useMutation(UPDATE_KEYS);\n    const [createPrivateKey] = useMutation(SEND_MESSAGE);\n    const [createGroup] = useMutation(CREATE_GROUP, {\n        onCompleted({ createGroup }) {\n            const username = localStorage.getItem('username');\n            const privateKey = localStorage.getItem('temp-group-privatekey')\n            localStorage.setItem(`${createGroup.id}-privateKey`, privateKey);\n            localStorage.removeItem('temp-group-privatekey');\n            createGroup.users.map(user => {\n                const content = encryptMessageForPrivateKey(privateKey, user);\n                createPrivateKey({ variables: { username: user.username, gid: createGroup.id, privateKey: content} });\n                return true;\n            });\n            updateKeys({variables: {username, keys: encryptLocalStorage()}});\n            handleClose();\n        }\n    });\n\n    const createGroupChat = (raw_tags, groupName) => {\n        raw_tags.push(localStorage.getItem('username')) // transparently include current user in every group they create\n        function onlyUnique(value, index, self) {\n            return self.indexOf(value) === index;\n        }\n        var tags = raw_tags.filter(onlyUnique);\n        if (tags && tags.length > 0) {\n            Promise.resolve(generateKeys(groupName, 256)).then(function (array) {\n                const publicKey = array.publicKey\n                const privateKey = array.privateKey\n                localStorage.setItem('temp-group-privatekey', privateKey);\n                createGroup({ variables: { users: tags, publicKey: publicKey, name: groupName } });\n            });\n        }\n        else {\n            console.log(\"Error, you have no individuals to add to the group\")\n        }\n    }\n\n    return (\n        <div>\n            <Modal show={show} transparent={\"true\"} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Input the individuals to add to your new Group Chat!</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <TagsInput value={tags} onChange={(newTags) => setTags(newTags)} inputProps={{\n                        className: 'react-tagsinput-input',\n                        placeholder: 'Add people!'\n                    }} onlyUnique />\n                    <Form style={{marginTop: \"20px\"}}>\n                        <Form.Group>\n                            <Form.Control type=\"text\" placeholder=\"GroupName\" value={groupName} onChange={(e) => setgroupName(e.target.value)} />\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                        <Button variant=\"primary\" onClick={() => createGroupChat(tags, groupName)}>\n                            Create Group!\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>);\n}\nexport default GroupChatTags;\n","import React, { useState } from 'react';\nimport ChatLeftList from './ChatLeftList.react';\nimport ChatMessages from './ChatMessages.react';\nimport Button from 'react-bootstrap/Button';\nimport './../App.css';\n\nimport { ThemeProvider, darkTheme, elegantTheme, purpleTheme, defaultTheme } from '@livechat/ui-kit'\nimport GroupChatTags from './GroupChatTags.react';\n\nconst themes = {\n    defaultTheme: {\n        FixedWrapperMaximized: {\n            css: {\n                boxShadow: '0 0 1em rgba(0, 0, 0, 0.1)',\n            },\n        },\n        OwnMessage: {\n            ...defaultTheme.OwnMessage,\n            backgroundColor: '#456456',\n            secondaryTextColor: '#456456',\n        },\n    },\n    purpleTheme: {\n        ...purpleTheme,\n        TextComposer: {\n            ...purpleTheme.TextComposer,\n            css: {\n                ...purpleTheme.TextComposer.css,\n                marginTop: '1em',\n            },\n        },\n        OwnMessage: {\n            ...purpleTheme.OwnMessage,\n            secondaryTextColor: '#fff',\n        },\n    },\n    elegantTheme: {\n        ...elegantTheme,\n        Message: {\n            ...darkTheme.Message,\n            secondaryTextColor: '#fff',\n        },\n        OwnMessage: {\n            ...darkTheme.OwnMessage,\n            secondaryTextColor: '#fff',\n        },\n    },\n    darkTheme: {\n        ...darkTheme,\n        Message: {\n            ...darkTheme.Message,\n            css: {\n                ...darkTheme.Message.css,\n                color: '#fff',\n            },\n        },\n        OwnMessage: {\n            ...darkTheme.OwnMessage,\n            secondaryTextColor: '#fff',\n        },\n        TitleBar: {\n            ...darkTheme.TitleBar,\n            css: {\n                ...darkTheme.TitleBar.css,\n                padding: '1em',\n            },\n        },\n    },\n}\n\nfunction ChatMain({client}) {\n    const [selectedGroup, setSelectedGroup] = useState(null);\n    const [doneFetching, setDoneFetching] = useState(false)\n    const [show, setShow] = useState(false);\n\n    const logout = () => {\n        localStorage.clear();\n        let fullURL = window.location.href.split('/');\n        fullURL.pop();\n        const baseURL = fullURL.join('/')\n        window.location.href = baseURL;\n    }\n\n    return (<>\n    <GroupChatTags show={show} setShow={setShow} />\n        <ThemeProvider theme={themes.defaultTheme}>\n            <div style={{\n                height: \"100%\",\n                width: \"30%\",\n                position: \"fixed\",\n                zIndex: 1,\n                top: 0,\n                overflowX: 'hidden',\n                paddingTop: '20px',\n                left: 0\n            }}>\n                <div className=\"App\">\n                    <Button variant=\"primary\" style={{ marginRight: \"10px\" }} onClick={() => setShow(!show)}>Create Group Chat</Button>\n                    <Button variant=\"secondary\" onClick={logout}>Logout</Button>\n                </div>\n                <ChatLeftList client={client} selectedGroup={selectedGroup} setSelectedGroup={setSelectedGroup} setDoneFetching={setDoneFetching}>\n                </ChatLeftList>\n            </div>\n\n            <div style={{\n                height: \"100%\",\n                width: \"70%\",\n                position: \"fixed\",\n                zIndex: 1,\n                top: 0,\n                overflowX: 'hidden',\n                paddingTop: '20px',\n                right: 0,\n                border: \"1px solid rgba(0,0,0,0.1)\",\n            }}>\n                {\n                    selectedGroup && <ChatMessages selectedGroup={selectedGroup} doneFetching={doneFetching} setDoneFetching={setDoneFetching}></ChatMessages>\n                }\n            </div>\n        </ThemeProvider>\n    </>);\n}\n\nexport default ChatMain;","import React from 'react';\nimport './../App.css';\nimport { ApolloClient, InMemoryCache, createHttpLink, ApolloProvider } from '@apollo/client';\nimport ChatMain from './ChatMain.react';\nimport { setContext } from '@apollo/client/link/context';\nimport { split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws';\n\nfunction ChatMainApolloProvider() {\n    const PRODUCTION = window.location.href.includes(\"https://rithik.me/\");\n    const serverURL = PRODUCTION ? 'https://e2-chat.herokuapp.com' : 'http://localhost:4000';\n    const wsURL = PRODUCTION ? 'wss://e2-chat.herokuapp.com' : 'ws://localhost:4000';\n    const token = localStorage.getItem('token');\n    const httpLink = createHttpLink({\n        uri: `${serverURL}/graphql`,\n    });\n\n    const authLink = setContext((_, { headers }) => {\n        return {\n            headers: {\n                ...headers,\n                authorization: token ? `${token}` : \"\",\n            }\n        }\n    });\n\n    const wsLink = new WebSocketLink({\n        uri: `${wsURL}/graphql`,\n        options: {\n            reconnect: true,\n            connectionParams: {\n                Authorization: token,\n            },\n        }\n    });\n\n    const splitLink = split(\n        ({ query }) => {\n            const definition = getMainDefinition(query);\n            return (\n                definition.kind === 'OperationDefinition' &&\n                definition.operation === 'subscription'\n            );\n        },\n        wsLink,\n        authLink.concat(httpLink),\n    );\n\n    const client = new ApolloClient({\n        link: splitLink,\n        cache: new InMemoryCache()\n    });\n\n    return (<ApolloProvider client={client}>\n        <div>\n            <ChatMain client={client} />\n        </div>\n    </ApolloProvider>);\n}\n\nexport default ChatMainApolloProvider;\n","import React, { useState } from 'react';\nimport './../App.css';\nimport { generateKeys, generatePasswordHash } from '../utils/generateKeys'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField'\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport Alert from '@material-ui/lab/Alert';\nimport IconButton from '@material-ui/core/IconButton';\nimport Collapse from '@material-ui/core/Collapse';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport { encryptLocalStorage, setLocalStorage } from '../utils/localStorageKeyGen';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst CREATE_USER = gql`\n\tmutation CreateUser($username: String!, $publicKey: String!){\n\t  createUser(username:$username, publicKey:$publicKey){\n\t    id\n\t    username\n\t    publicKey\n\t  }\n\t}\n`;\nconst CREATE_TOKEN = gql`\n\tmutation CreateToken($username: String!, $publicKey: String!){\n\t\t  createToken(username:$username, publicKey:$publicKey){\n\t\t    token\n\t\t    username\n\t\t}\n\t}\n`;\nconst GET_USER = gql`\n\tquery User($username: String!){\n\t\tuser(username:$username){\n\t\t\tusername\n\t\t\tid\n\t\t\tkeys\n\t\t}\n\t}\n`;\n\nconst UPDATE_KEYS = gql`\n    mutation updateKeys($username: String!, $keys: String!){\n        updateKeys(username:$username, keys:$keys){\n            success\n        }\n    }\n`;\n\n// register the user\nfunction Register() {\n\tconst [updateKeys] = useMutation(UPDATE_KEYS);\n\tconst [createUser] = useMutation(CREATE_USER, {\n\t\tonCompleted({ createUser }) {\n\t\t\tconst username = createUser.username;\n\t\t\tconst publicKey = createUser.publicKey;\n\t\t\tcreateToken({ variables: { username, publicKey } });\n\t\t}\n\t});\n\tconst [createToken] = useMutation(CREATE_TOKEN, {\n\t\tonCompleted({ createToken }) {\n\t\t\tconst password = tab === 'login' ? loginPassword : registerPassword;\n\t\t\tlocalStorage.setItem('token', createToken.token);\n\t\t\tlocalStorage.setItem('username', createToken.username);\n\t\t\tlocalStorage.setItem('password', generatePasswordHash(password));\n\t\t\tupdateKeys({ variables: { username: createToken.username, keys: encryptLocalStorage() } });\n\t\t\twindow.location.href = window.location.href + 'main';\n\t\t}\n\t});\n\n\tconst [createLoginToken] = useMutation(CREATE_TOKEN, {\n\t\tonCompleted({ createToken }) {\n\t\t\tlocalStorage.setItem('token', createToken.token);\n\t\t\twindow.location.href = window.location.href + 'main';\n\t\t}\n\t});\n\n\tconst [registerUsername, setRegisterUsername] = useState('');\n\tconst [registerPassword, setRegisterPassword] = useState('');\n\n\tconst [loginUsername, setLoginUsername] = useState('');\n\tconst [loginPassword, setLoginPassword] = useState('');\n\n\tconst [registerUsernameError, setRegisterUsernameError] = useState(false);\n\tconst [loginError, setLoginError] = useState(false);\n\n\tconst [buttonPressed, setButtonPressed] = useState(false);\n\n\tconst [tab, setTab] = useState('login');\n\n\tconst { error, refetch } = useQuery(GET_USER, {\n\t\tvariables: { username: tab === 'login' ? loginUsername : registerUsername },\n\t});\n\n\tconst setKeys = async (myUsernameValue) => {\n\t\tconst username = tab === 'login' ? loginUsername : registerUsername;\n\t\tPromise.resolve(generateKeys(myUsernameValue, 4096)).then(function (array) {\n\t\t\tconst publicKey = array.publicKey\n\t\t\tconst privateKey = array.privateKey\n\t\t\tcreateUser({ variables: { username, publicKey } });\n\t\t\tlocalStorage.setItem('user-publicKey', publicKey);\n\t\t\tlocalStorage.setItem('user-privateKey', privateKey);\n\t\t\tlocalStorage.setItem('username', username);\n\t\t});\n\t}\n\n\tconst registerUser = async () => {\n\t\tconst {data: userData} = await refetch({username: registerUsername});\n\t\tif (error) {\n\t\t\tsetKeys(registerUsername);\n\t\t}\n\t\telse {\n\t\t\tif (userData.user == null) {\n\t\t\t\tsetRegisterUsernameError(false);\n\t\t\t\tsetKeys(registerUsername);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsetRegisterUsernameError(true);\n\t\t\t\tsetButtonPressed(false);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst loginUser = async () => {\n\t\tconst {data: userData} = await refetch({username: loginUsername});\n\t\tconsole.log(userData);\n\t\tif (error) {\n\t\t\tconsole.error(error);\n\t\t\tsetLoginError(true);\n\t\t\tsetButtonPressed(false);\n\t\t}\n\t\telse {\n\t\t\tif (userData.user === null) {\t\t\t\t\n\t\t\t\tsetLoginError(true);\n\t\t\t\tsetButtonPressed(false);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst hashedPassword = generatePasswordHash(loginPassword);\n\t\t\t\tconst success = setLocalStorage(userData.user.keys, hashedPassword);\n\t\t\t\tif (success) {\n\t\t\t\t\tconst username = localStorage.getItem('username');\n\t\t\t\t\tconst publicKey = localStorage.getItem('user-publicKey');\n\t\t\t\t\tcreateLoginToken({ variables: { username, publicKey } });\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsetLoginError(true);\n\t\t\t\t\tsetButtonPressed(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (\n\t\t<Tabs fill={true}\n\t\t\tid=\"controlled-tab-example\"\n\t\t\tclassName=\"tabHeadings\"\n\t\t\tactiveKey={tab}\n\t\t\tonSelect={(k) => setTab(k)}\n\t\t>\n\t\t\t<Tab eventKey=\"login\" title=\"Login\">\n\t\t\t\t<div className=\"register\">\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\tstyle: { color: \"black\" },\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tid=\"outlined-basic\" label=\"Username\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={loginUsername}\n\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\tonChange={(e) => setLoginUsername(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\tstyle: { color: \"black\" },\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tid=\"outlined-basic\" label=\"Password\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={loginPassword}\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\tonChange={(e) => setLoginPassword(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<Button disabled={buttonPressed} onClick={(e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tsetButtonPressed(true);\n\t\t\t\t\t\tloginUser()\n\t\t\t\t\t}} variant=\"contained\" color=\"secondary\">\n\t\t\t\t\t\t{buttonPressed && <CircularProgress\n\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\tstyle={{ color: 'white', marginRight: '10px' }}\n\t\t\t\t\t\t/>} Login\n\t\t\t</Button>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<Collapse in={loginError}>\n\t\t\t\t\t\t<Alert\n\t\t\t\t\t\t\taction={\n\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\taria-label=\"close\"\n\t\t\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tsetLoginError(false);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CloseIcon fontSize=\"inherit\" />\n\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvariant=\"filled\" severity=\"error\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tInvalid Login\n\t\t\t\t</Alert>\n\t\t\t\t\t</Collapse>\n\n\t\t\t\t</div>\n\t\t\t</Tab>\n\t\t\t<Tab eventKey=\"register\" title=\"Register\">\n\t\t\t\t<div className=\"register\">\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\tstyle: { color: \"black\" },\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tid=\"outlined-basic\" label=\"Username\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={registerUsername}\n\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\tonChange={(e) => setRegisterUsername(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\tstyle: { color: \"black\" },\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tid=\"outlined-basic\" label=\"Password\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={registerPassword}\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\tonChange={(e) => setRegisterPassword(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<Button disabled={buttonPressed} onClick={(e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tsetButtonPressed(true);\n\t\t\t\t\t\tregisterUser();\n\t\t\t\t\t}} variant=\"contained\" color=\"secondary\">\n\t\t\t\t\t\t{buttonPressed && <CircularProgress\n\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\tstyle={{ color: 'white', marginRight: '10px' }}\n\t\t\t\t\t\t/>} Register\n\t\t\t</Button>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<Collapse in={registerUsernameError}>\n\t\t\t\t\t\t<Alert\n\t\t\t\t\t\t\taction={\n\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\taria-label=\"close\"\n\t\t\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tsetRegisterUsernameError(false);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CloseIcon fontSize=\"inherit\" />\n\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvariant=\"filled\" severity=\"error\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tInvalid username - choose a unique username\n\t\t\t\t</Alert>\n\t\t\t\t\t</Collapse>\n\n\t\t\t\t</div>\n\t\t\t</Tab>\n\t\t</Tabs>\n\t);\n}\n\nexport default Register;\n","import React from 'react';\nimport './../App.css';\nimport Register from './register.react'\nimport { ApolloClient, InMemoryCache, createHttpLink, ApolloProvider } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws';\n\nfunction RegisterApolloProvider() {\n    const PRODUCTION = window.location.href.includes(\"https://rithik.me/\");\n    const serverURL = PRODUCTION ? 'https://e2-chat.herokuapp.com' : 'http://localhost:4000';\n    const wsURL = PRODUCTION ? 'wss://e2-chat.herokuapp.com' : 'ws://localhost:4000';\n    const token = localStorage.getItem('token');\n    const httpLink = createHttpLink({\n        uri: `${serverURL}/graphql`,\n    });\n\n    const authLink = setContext((_, { headers }) => {\n        return {\n            headers: {\n                ...headers,\n                authorization: token ? `${token}` : \"\",\n            }\n        }\n    });\n\n    const wsLink = new WebSocketLink({\n        uri: `${wsURL}/graphql`,\n        options: {\n            reconnect: true,\n            connectionParams: {\n                Authorization: token,\n            },\n        }\n    });\n\n    const splitLink = split(\n        ({ query }) => {\n            const definition = getMainDefinition(query);\n            return (\n                definition.kind === 'OperationDefinition' &&\n                definition.operation === 'subscription'\n            );\n        },\n        wsLink,\n        authLink.concat(httpLink),\n    );\n\n    const client = new ApolloClient({\n        link: splitLink,\n        cache: new InMemoryCache()\n    });\n\n    return (<ApolloProvider client={client}>\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Register />\n            </header>\n        </div>\n    </ApolloProvider>);\n}\n\nexport default RegisterApolloProvider;\n","import React from 'react';\nimport './App.css';\nimport {\n  Switch,\n  Route,\n  HashRouter\n} from \"react-router-dom\";\nimport ChatMainApolloProvider from './components/ChatMainApolloProvider.react';\nimport RegisterApolloProvider from './components/RegisterApolloProvider.react';\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n      <Switch>\n        <Route path=\"/main\">\n          <ChatMainApolloProvider />\n        </Route>\n        <Route path=\"/\">\n          <RegisterApolloProvider />\n        </Route>\n      </Switch>\n    </HashRouter>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}