{"version":3,"sources":["utils/generateKeys.tsx","utils/localStorageKeyGen.ts","components/register.react.js","components/ChatLeftList.react.js","utils/AESEncryption.js","components/ChatFeed.react.js","components/ChatMessages.react.js","components/GroupChatTags.react.js","components/ChatMain.react.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["ab2str","buf","String","fromCharCode","apply","Array","from","Uint8Array","exportCryptoPublicKey","key","a","window","crypto","subtle","exportKey","exported","exportedAsString","exportedAsBase64","btoa","pemExported","exportCryptoPrivateKey","username","generateKey","name","modulusLength","publicExponent","hash","then","keyPair","publicKey","privateKey","response","generatePasswordHash","password","pbkdf2","pbkdf2Sync","toString","encryptLocalStorage","localStorageString","JSON","stringify","localStorage","hashedPassword","getItem","CryptoJS","AES","encrypt","CREATE_USER","gql","CREATE_TOKEN","GET_USER","UPDATE_KEYS","Register","useMutation","updateKeys","createUser","onCompleted","createToken","tab","loginPassword","registerPassword","setItem","token","variables","keys","location","href","createLoginToken","useState","registerUsername","setRegisterUsername","setRegisterPassword","loginUsername","setLoginUsername","setLoginPassword","registerUsernameError","setRegisterUsernameError","loginError","setLoginError","setTab","useQuery","error","loading","data","setKeys","myUsernameValue","Promise","resolve","generateKeys","array","loginUser","console","log","user","decrypt","localStorageDict","parse","enc","Utf8","Object","entries","value","e","setLocalStorage","Tabs","fill","id","className","activeKey","onSelect","k","Tab","eventKey","title","TextField","InputProps","style","color","label","variant","fullWidth","onChange","target","type","Button","onClick","preventDefault","Collapse","in","Alert","action","IconButton","aria-label","size","fontSize","severity","GET_GROUPS","GROUP_SUBSCRIPTION","ChatLeftList","selectedGroup","setSelectedGroup","setDoneFetching","firstLoad","setFirstLoad","subscribeToMore","useEffect","document","updateQuery","prev","subscriptionData","newGroup","assign","groupsByUser","message","groupDivs","map","group","users","active","letter","charAt","toUpperCase","justify","ellipsis","join","maxWidth","encryptMessage","groupId","messageJSON","messageString","groupPrivateKey","decryptMessage","override","css","SEND_MESSAGE","ChatFeed","onLoadMore","doneFetching","subscribeToNewMessages","messageInput","setMessageInput","createMessage","messagesEndRef","React","createRef","messagesStartRef","lm","reversedEntries","concat","messagesByGroup","reverse","messages","cType","includes","messageContent","crypt","JSEncrypt","setPrivateKey","decryptMessageForPrivateKey","content","Message","sender","senderName","filter","Boolean","scrollIntoView","behavior","setInterval","top","getBoundingClientRect","innerHeight","marginLeft","marginRight","marginBottom","height","ref","el","showSenderName","bubblesCentered","bubbleStyles","text","chatbubble","borderRadius","padding","float","clear","Form","width","bottom","position","Group","Control","placeholder","onKeyPress","event","gid","GET_MESSAGES","MESSAGE_SUBSCRIPTION","ChatMessages","offset","limit","fetchPolicy","fetchMore","length","fetchMoreResult","newFeedItem","newMessage","CREATE_GROUP","GroupChatTags","show","setShow","tags","setTags","handleClose","groupName","setgroupName","createGroup","removeItem","setPublicKey","encryptMessageForPrivateKey","createGroupChat","raw_tags","push","index","self","indexOf","generateGroupKeys","Modal","transparent","onHide","Header","closeButton","Title","Body","newTags","inputProps","onlyUnique","marginTop","Footer","themes","defaultTheme","FixedWrapperMaximized","boxShadow","OwnMessage","backgroundColor","secondaryTextColor","purpleTheme","TextComposer","elegantTheme","darkTheme","TitleBar","ChatMain","theme","zIndex","overflowX","paddingTop","left","fullURL","split","pop","baseURL","right","border","App","serverURL","process","PRODUCTION","wsURL","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","wsLink","WebSocketLink","options","reconnect","connectionParams","Authorization","splitLink","query","definition","getMainDefinition","kind","operation","client","ApolloClient","link","cache","InMemoryCache","path","hostname","match","ReactDOM","render","Fragment","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.cc193a56.chunk.js","sourcesContent":["import '../App.css';\nimport pbkdf2 from 'pbkdf2';\n\nfunction ab2str(buf: any) {\n    return String.fromCharCode.apply(null, Array.from(new Uint8Array(buf)));\n}\n\nasync function exportCryptoPublicKey(key: any) {\n    const exported = await window.crypto.subtle.exportKey(\n        \"spki\",\n        key\n    );\n    const exportedAsString = ab2str(exported);\n    const exportedAsBase64 = window.btoa(exportedAsString);\n    const pemExported = `-----BEGIN PUBLIC KEY-----\\n${exportedAsBase64}\\n-----END PUBLIC KEY-----`;\n    return pemExported;\n}\n\nasync function exportCryptoPrivateKey(key: any) {\n    const exported = await window.crypto.subtle.exportKey(\n        \"pkcs8\",\n        key\n    );\n    const exportedAsString = ab2str(exported);\n    const exportedAsBase64 = window.btoa(exportedAsString);\n    const pemExported = `-----BEGIN PRIVATE KEY-----\\n${exportedAsBase64}\\n-----END PRIVATE KEY-----`;\n    return pemExported;\n}\n\n\nexport async function generateKeys(username: string) {\n    const response = await window.crypto.subtle.generateKey({\n        name: \"RSA-OAEP\",\n        modulusLength: 8192,\n        publicExponent: new Uint8Array([1, 0, 1]),\n        hash: \"SHA-256\",\n    },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    ).then(async (keyPair) => {\n        const publicKey = await exportCryptoPublicKey(keyPair.publicKey);\n        const privateKey = await exportCryptoPrivateKey(keyPair.privateKey);\n        return {\n            privateKey,\n            username,\n            publicKey\n        }\n    });\n    return response;\n}\n\n\nexport async function generateGroupKeys(username: string) {\n    const response = await window.crypto.subtle.generateKey({\n        name: \"RSA-OAEP\",\n        modulusLength: 256,\n        publicExponent: new Uint8Array([1, 0, 1]),\n        hash: \"SHA-256\",\n    },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    ).then(async (keyPair) => {\n        const publicKey = await exportCryptoPublicKey(keyPair.publicKey);\n        const privateKey = await exportCryptoPrivateKey(keyPair.privateKey);\n        return {\n            privateKey,\n            username,\n            publicKey\n        }\n    });\n    return response;\n};\n\nexport function generatePasswordHash(password: string){\n    var derivedKey = pbkdf2.pbkdf2Sync(password, 'salt', 1, 32, 'sha512').toString('hex');\n    return derivedKey;\n}","import CryptoJS from \"crypto-js\";\n\nexport function encryptLocalStorage() {\n    const localStorageString = JSON.stringify(localStorage);\n    const hashedPassword: string = localStorage.getItem('password') || '';\n    const encrypted = CryptoJS.AES.encrypt(localStorageString, hashedPassword).toString();\n    return encrypted;\n}\n\nexport function setLocalStorage(localStorageString: string, hashedPassword: string) {\n    const decrypt = CryptoJS.AES.decrypt(localStorageString, hashedPassword);\n    try{\n        const localStorageDict = JSON.parse(decrypt.toString(CryptoJS.enc.Utf8));\n        for (const [key, value] of Object.entries(localStorageDict)) {\n            localStorage.setItem(key, (value as string));\n        }\n    }\n    catch(e){\n        console.error(e);\n        return false;\n    }\n    return true;\n}","import React, { useState } from 'react';\nimport './../App.css';\nimport { generateKeys, generatePasswordHash } from '../utils/generateKeys'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField'\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport Alert from '@material-ui/lab/Alert';\nimport IconButton from '@material-ui/core/IconButton';\nimport Collapse from '@material-ui/core/Collapse';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport {encryptLocalStorage, setLocalStorage} from '../utils/localStorageKeyGen';\n\nconst CREATE_USER = gql`\n\tmutation CreateUser($username: String!, $publicKey: String!){\n\t  createUser(username:$username, publicKey:$publicKey){\n\t    id\n\t    username\n\t    publicKey\n\t  }\n\t}\n`;\nconst CREATE_TOKEN = gql`\n\tmutation CreateToken($username: String!, $publicKey: String!){\n\t\t  createToken(username:$username, publicKey:$publicKey){\n\t\t    token\n\t\t    username\n\t\t}\n\t}\n`;\nconst GET_USER = gql`\n\tquery User($username: String!){\n\t\tuser(username:$username){\n\t\t\tusername\n\t\t\tid\n\t\t\tkeys\n\t\t}\n\t}\n`;\n\nconst UPDATE_KEYS = gql`\n    mutation updateKeys($username: String!, $keys: String!){\n        updateKeys(username:$username, keys:$keys){\n            success\n        }\n    }\n`;\n\n// register the user\nfunction Register() {\n\tconst [updateKeys] = useMutation(UPDATE_KEYS);\n\tconst [createUser] = useMutation(CREATE_USER);\n\tconst [createToken] = useMutation(CREATE_TOKEN, {\n\t\tonCompleted({ createToken }) {\n\t\t\tconst password = tab === 'login' ? loginPassword : registerPassword;\n\t\t\tlocalStorage.setItem('token', createToken.token);\n\t\t\tlocalStorage.setItem('username', createToken.username);\n\t\t\tlocalStorage.setItem('password', generatePasswordHash(password));\n\t\t\tupdateKeys({variables: {username: createToken.username, keys: encryptLocalStorage()}});\n\t\t\twindow.location.href = window.location.href + '/main';\n\t\t}\n\t});\n\n\tconst [createLoginToken] = useMutation(CREATE_TOKEN, {\n\t\tonCompleted({ createToken }) {\n\t\t\tlocalStorage.setItem('token', createToken.token);\n\t\t\twindow.location.href = window.location.href + 'main';\n\t\t}\n\t});\n\n\tconst [registerUsername, setRegisterUsername] = useState('');\n\tconst [registerPassword, setRegisterPassword] = useState('');\n\n\tconst [loginUsername, setLoginUsername] = useState('');\n\tconst [loginPassword, setLoginPassword] = useState('');\n\n\tconst [registerUsernameError, setRegisterUsernameError] = useState(false);\n\tconst [loginError, setLoginError] = useState(false);\n\n\tconst [tab, setTab] = useState('login');\n\n\tconst { loading, error, data } = useQuery(GET_USER, {\n\t\tvariables: { username: tab === 'login' ? loginUsername : registerUsername },\n\t});\n\n\tfunction setKeys(myUsernameValue) {\n\t\tconst username = tab === 'login' ? loginUsername : registerUsername;\n\t\tconst x = Promise.resolve(generateKeys(myUsernameValue)).then(function (array) {\n\t\t\tconst publicKey = array.publicKey\n\t\t\tconst privateKey = array.privateKey\n\t\t\tcreateUser({ variables: { username, publicKey } });\n\t\t\tlocalStorage.setItem('user-publicKey', publicKey);\n\t\t\tlocalStorage.setItem('user-privateKey', privateKey);\n\t\t\tcreateToken({ variables: { username, publicKey } });\n\t\t});\n\t}\n\n\tconst registerUser = () => {\n\t\tif (error) {\n\t\t\tconsole.log('error in username, still setting new user')\n\t\t\tsetKeys(registerUsername);\n\t\t}\n\t\telse {\n\t\t\tconsole.log(data)\n\t\t\tif (data.user === null) {\n\t\t\t\tconsole.log('username is valid, creating new set of keys')\n\t\t\t\tsetRegisterUsernameError(false)\n\t\t\t\tsetKeys(registerUsername);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log('username exists')\n\t\t\t\tsetRegisterUsernameError(true)\n\t\t\t}\n\t\t}\n\t}\n\n\tconst loginUser = () => {\n\t\tif (error) {\n\t\t\tconsole.log(error);\n\t\t\tsetLoginError(true);\n\t\t}\n\t\telse {\n\t\t\tconsole.log(data)\n\t\t\tif (data.user === null) {\n\t\t\t\tconsole.log('username is valid, creating new set of keys')\n\t\t\t\tsetLoginError(true)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log('username exists')\n\t\t\t\tconsole.log(data.user);\n\t\t\t\tconst hashedPassword = generatePasswordHash(loginPassword);\n\t\t\t\tconsole.log(hashedPassword);\n\t\t\t\tconst success = setLocalStorage(data.user.keys, hashedPassword);\n\t\t\t\tif (success){\n\t\t\t\t\tconst username = localStorage.getItem('username');\n\t\t\t\t\tconst publicKey = localStorage.getItem('user-publicKey');\n\t\t\t\t\tcreateLoginToken({ variables: { username, publicKey } });\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tsetLoginError(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (\n\t\t<Tabs fill={true}\n\t\t\tid=\"controlled-tab-example\"\n\t\t\tclassName=\"tabHeadings\"\n\t\t\tactiveKey={tab}\n\t\t\tonSelect={(k) => setTab(k)}\n\t\t>\n\t\t\t<Tab eventKey=\"login\" title=\"Login\">\n\t\t\t\t<div className=\"register\">\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\tstyle: { color: \"black\" },\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tid=\"outlined-basic\" label=\"Username\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={loginUsername}\n\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\tonChange={(e) => setLoginUsername(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\tstyle: { color: \"black\" },\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tid=\"outlined-basic\" label=\"Password\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={loginPassword}\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\tonChange={(e) => setLoginPassword(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<Button onClick={(e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tloginUser()\n\t\t\t\t\t}} variant=\"contained\" color=\"secondary\">\n\t\t\t\t\t\tLogin\n\t\t\t</Button>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<Collapse in={loginError}>\n\t\t\t\t\t\t<Alert\n\t\t\t\t\t\t\taction={\n\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\taria-label=\"close\"\n\t\t\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tsetLoginError(false);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CloseIcon fontSize=\"inherit\" />\n\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvariant=\"filled\" severity=\"error\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tInvalid Login\n\t\t\t\t</Alert>\n\t\t\t\t\t</Collapse>\n\n\t\t\t\t</div>\n\t\t\t</Tab>\n\t\t\t<Tab eventKey=\"register\" title=\"Register\">\n\t\t\t\t<div className=\"register\">\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\tstyle: { color: \"black\" },\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tid=\"outlined-basic\" label=\"Username\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={registerUsername}\n\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\tonChange={(e) => setRegisterUsername(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\tstyle: { color: \"black\" },\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tid=\"outlined-basic\" label=\"Password\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={registerPassword}\n\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\tonChange={(e) => setRegisterPassword(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<Button onClick={(e) => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tregisterUser();\n\t\t\t\t\t}} variant=\"contained\" color=\"secondary\">\n\t\t\t\t\t\tRegister\n\t\t\t</Button>\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t<Collapse in={registerUsernameError}>\n\t\t\t\t\t\t<Alert\n\t\t\t\t\t\t\taction={\n\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\taria-label=\"close\"\n\t\t\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tsetRegisterUsernameError(false);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<CloseIcon fontSize=\"inherit\" />\n\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvariant=\"filled\" severity=\"error\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tInvalid username - choose a unique username\n\t\t\t\t</Alert>\n\t\t\t\t\t</Collapse>\n\n\t\t\t\t</div>\n\t\t\t</Tab>\n\t\t</Tabs>\n\t);\n}\n\nexport default Register;\n","import React, {useEffect, useState} from 'react';\n\nimport {\n  gql,\n  useQuery\n} from '@apollo/client';\n\nimport { ChatList, ChatListItem, Avatar, Column, Row, Title, Subtitle } from '@livechat/ui-kit'\n\nconst GET_GROUPS = gql`\n  query getGroupsWithUser($username: String!) {\n    groupsByUser(username: $username){\n      id\n      name\n      users {\n        username\n      }\n    }\n  }\n`;\n\nconst GROUP_SUBSCRIPTION = gql`\n    subscription getNewGroups($username: String!){\n        newGroup(username: $username){\n          id\n          users{\n            username\n          }\n          name\n          publicKey\n        }\n    }\n`;\n\nfunction ChatLeftList({ selectedGroup, setSelectedGroup, setDoneFetching }) {\n  const username = localStorage.getItem('username');\n  const [firstLoad, setFirstLoad] = useState(false);\n\n  const {\n    subscribeToMore,\n    loading,\n    error,\n    data\n  } = useQuery(GET_GROUPS, {\n    variables: {\n      username\n    }\n  });\n\n  const subscribeToNewMessages = () => {\n    subscribeToMore({\n      document: GROUP_SUBSCRIPTION,\n      variables: { username },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const newGroup = subscriptionData.data.newGroup;\n        return Object.assign({}, prev, {\n          groupsByUser: [newGroup, ...prev.groupsByUser]\n        });\n      }\n    })\n  };\n\n  useEffect(() => {\n    if (!firstLoad){\n      setFirstLoad(true);\n      subscribeToNewMessages();\n    }\n  }, [firstLoad]);\n\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  const groupDivs = data.groupsByUser.map(group => {\n    const users = group.users.map(user => `@${user.username}`);\n    return (\n      <div key={group.id} onClick={() => { setSelectedGroup(group.id); setDoneFetching(false) }}>\n        <ChatListItem active={group.id === selectedGroup}>\n          <Avatar letter={group.name.charAt(0).toUpperCase()} />\n          <Column fill=\"true\">\n            <Row justify>\n              <Title ellipsis>{group.name}</Title>\n            </Row>\n            <Row justify>\n              <Subtitle ellipsis>{users.join(\", \")}</Subtitle>\n            </Row>\n          </Column>\n        </ChatListItem>\n      </div>\n    )\n  });\n\n  return (<ChatList style={{ maxWidth: '100%' }}>\n    {groupDivs}\n  </ChatList>);\n}\n\nexport default ChatLeftList;","import JSEncrypt from 'jsencrypt';\nimport CryptoJS from \"crypto-js\";\n\nexport function encryptMessage(message, type, groupId){\n    var messageJSON = {\"message\": message, \"type\":type}\n    var messageString = JSON.stringify(messageJSON);\n    const groupPrivateKey = localStorage.getItem(`${groupId}-privateKey`);\n    const encrypted = CryptoJS.AES.encrypt(messageString, groupPrivateKey).toString();\n    return encrypted;\n}\n\nexport function decryptMessage(message, groupId){\n    const groupPrivateKey = localStorage.getItem(`${groupId}-privateKey`);\n    const decrypt = CryptoJS.AES.decrypt(message, groupPrivateKey);\n    return JSON.parse(decrypt.toString(CryptoJS.enc.Utf8));\n}\n\n\nexport function encryptMessageForPrivateKey(message, user){\n    var crypt = new JSEncrypt();\n    console.log(message, user);\n    crypt.setPublicKey(user.publicKey);\n    const encrypted = crypt.encrypt(message);\n    return encrypted;\n}\n\nexport function decryptMessageForPrivateKey(message){\n    console.log(message);\n    var crypt = new JSEncrypt();\n    crypt.setPrivateKey(localStorage.getItem('user-privateKey'));\n    const decrypted = crypt.decrypt(message);\n    return decrypted;\n}\n","import React, { useEffect, useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { ChatFeed as ChatFeedUI, Message } from 'react-chat-ui';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { css } from \"@emotion/core\";\nimport { gql, useMutation } from '@apollo/client';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {encryptMessage, decryptMessage, decryptMessageForPrivateKey} from '../utils/AESEncryption';\nimport {encryptLocalStorage} from '../utils/localStorageKeyGen';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\nconst SEND_MESSAGE = gql`\n    mutation SendMessage($username: String!, $content: String!, $gid: Int!, $cType: String!){\n        createMessage(sender:$username, group:$gid, content:$content, cType:$cType){\n            id\n            content\n            ts\n        }\n    }\n`;\n\nconst UPDATE_KEYS = gql`\n    mutation updateKeys($username: String!, $keys: String!){\n        updateKeys(username:$username, keys:$keys){\n            success\n        }\n    }\n`;\n\nfunction ChatFeed({\n    entries,\n    onLoadMore,\n    doneFetching,\n    subscribeToNewMessages,\n    selectedGroup\n}) {\n    const [firstLoad, setFirstLoad] = useState(true);\n    const [messageInput, setMessageInput] = useState(\"\");\n    const [createMessage] = useMutation(SEND_MESSAGE);\n    const [updateKeys] = useMutation(UPDATE_KEYS);\n    let messagesEndRef = React.createRef();\n    let messagesStartRef = React.createRef();\n\n    window.lm = onLoadMore;\n    const reversedEntries = [].concat(entries.messagesByGroup).reverse();\n    const username = localStorage.getItem('username');\n    const messages = reversedEntries.map(message => {\n        if (message.cType.includes(\"group-private-key\")){\n            if (message.cType.includes(username)){\n                if (localStorage.getItem(`${selectedGroup}-privateKey`) == null || localStorage.getItem(`${selectedGroup}-privateKey`) === \"undefined\"){\n                    const messageContent = decryptMessageForPrivateKey(message.content);\n                    localStorage.setItem(`${selectedGroup}-privateKey`, messageContent);\n                    updateKeys({variables: {username, keys: encryptLocalStorage()}});\n                }\n            }\n            return null;\n        }\n        return new Message({ id: message.sender === username ? 0 : message.sender, message: decryptMessage(message.content, selectedGroup).message, senderName: `@${message.sender}` })\n    }).filter(Boolean);\n\n    useEffect(() => {\n        if (firstLoad) {\n            messagesEndRef.scrollIntoView({ behavior: \"smooth\" });\n            subscribeToNewMessages();\n            setFirstLoad(false);\n        }\n        setInterval(() => {\n            const offset = 0;\n            if (!messagesStartRef) return false;\n            const top = messagesStartRef.getBoundingClientRect().top;\n            const inView = (top + offset) >= 0 && (top - offset) <= window.innerHeight;\n            if (inView && !doneFetching) {\n                onLoadMore();\n            }\n        }, 1000);\n    }, [firstLoad, setFirstLoad, onLoadMore, messagesStartRef, messagesEndRef]);\n    return <div style={{ marginLeft: '10px', marginRight: '10px', marginBottom: '50px' }}>\n        <div style={{ height: '30px' }}\n            ref={(el) => { messagesStartRef = el; }}>\n            {\n                !doneFetching && <ClipLoader\n                    css={override}\n                    size={30}\n                    color={\"#123abc\"}\n                    loading={true}\n                />\n            }\n        </div>\n        <ChatFeedUI\n            messages={messages}\n            showSenderName\n            bubblesCentered={false}\n            bubbleStyles={\n                {\n                    text: {\n                        fontSize: 14\n                    },\n                    chatbubble: {\n                        borderRadius: 30,\n                        padding: 15\n                    }\n                }\n            }\n        />\n        <div style={{ float: \"left\", clear: \"both\" }}\n            ref={(el) => { messagesEndRef = el; }}>\n        </div>\n        <Form style={{ width: \"68%\", bottom: \"20px\", position: \"fixed\" }}>\n            <Form.Group>\n                <Form.Control type=\"text\" placeholder=\"Enter message\" value={messageInput} onChange={e => setMessageInput(e.target.value)} onKeyPress={event => {\n                if (event.key === 'Enter') {\n                    event.preventDefault()\n                    createMessage({ variables: { username, gid: selectedGroup, content: encryptMessage(messageInput, \"text\", selectedGroup), cType: \"text\" } });\n                }\n              }}/>\n            </Form.Group>\n        </Form>\n    </div>;\n}\n\nexport default ChatFeed;","import React from 'react';\n\nimport {\n    gql,\n    useQuery\n} from '@apollo/client';\nimport { css } from \"@emotion/core\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport ChatFeed from './ChatFeed.react';\n\nconst GET_MESSAGES = gql`\n    query getMessagesForGroup($gid: Int!, $offset: Int, $limit: Int) {\n        messagesByGroup(gid: $gid, count: $limit, offset: $offset){\n            id\n            content\n            ts\n            sender\n            cType\n        }\n    }\n`;\n\nconst MESSAGE_SUBSCRIPTION = gql`\n    subscription getNewMessages($gid: Int!){\n        newMessage(gid: $gid){\n            id\n            content\n            ts\n            sender\n            cType\n        }\n    }\n`;\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nfunction ChatMessages({\n    selectedGroup, doneFetching, setDoneFetching\n}) {\n    const { subscribeToMore, loading, error, data, fetchMore } = useQuery(\n        GET_MESSAGES,\n        {\n            variables: {\n                gid: selectedGroup,\n                offset: 0,\n                limit: 50\n            },\n            fetchPolicy: \"cache-and-network\"\n        }\n    );\n    if (loading) return (<div style={{ marginLeft: '10px', marginRight: '10px', marginBottom: '50px' }}>\n        <div style={{ height: '30px' }}>\n            {\n                !doneFetching && <ClipLoader\n                    css={override}\n                    size={30}\n                    color={\"#123abc\"}\n                    loading={true}\n                />\n            }\n        </div>\n    </div>);\n    if (error) return `Error! ${error.message}`;\n    return <ChatFeed entries={data} selectedGroup={selectedGroup} doneFetching={doneFetching} onLoadMore={() => {\n        if (doneFetching) {\n            return;\n        }\n        return fetchMore({\n            variables: {\n                offset: data.messagesByGroup.length\n            },\n            updateQuery: (prev, { fetchMoreResult }) => {\n                console.log(fetchMoreResult.messagesByGroup);\n                if (fetchMoreResult.messagesByGroup.length === 0) {\n                    setDoneFetching(true);\n                }\n                return Object.assign({}, prev, {\n                    messagesByGroup: [...prev.messagesByGroup, ...fetchMoreResult.messagesByGroup],\n                });\n            }\n        })\n    }}\n        subscribeToNewMessages={() =>\n            subscribeToMore({\n                document: MESSAGE_SUBSCRIPTION,\n                variables: { gid: selectedGroup },\n                updateQuery: (prev, { subscriptionData }) => {\n                    if (!subscriptionData.data) return prev;\n                    const newFeedItem = subscriptionData.data.newMessage;\n                    return Object.assign({}, prev, {\n                        messagesByGroup: [newFeedItem, ...prev.messagesByGroup]\n                    });\n                }\n            })\n        }\n    >\n    </ChatFeed>;\n}\n\nexport default ChatMessages;","import React, { useState } from 'react';\nimport TagsInput from 'react-tagsinput'\nimport 'react-tagsinput/react-tagsinput.css'\nimport { gql, useMutation } from '@apollo/client';\nimport { generateGroupKeys } from '../utils/generateKeys'\nimport { encryptMessageForPrivateKey } from '../utils/AESEncryption';\nimport {encryptLocalStorage} from '../utils/localStorageKeyGen';\n\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst CREATE_GROUP = gql`\nmutation createGroup($name: String!, $publicKey: String!, $users: [String!]){\n    createGroup(name:$name, publicKey:$publicKey, users:$users){\n      id\n      name\n      publicKey\n      users{\n          username\n          publicKey\n      }\n    }\n  }\n`;\n\nconst SEND_MESSAGE = gql`\n    mutation SendMessage($username: String!, $content: String!, $gid: Int!, $cType: String!){\n        createMessage(sender:$username, group:$gid, content:$content, cType: $cType){\n            id\n            content\n            ts\n            cType\n        }\n    }\n`;\n\nconst UPDATE_KEYS = gql`\n    mutation updateKeys($username: String!, $keys: String!){\n        updateKeys(username:$username, keys:$keys){\n            success\n        }\n    }\n`;\n\nfunction GroupChatTags({ show, setShow }) {\n    const [tags, setTags] = useState([]);\n\n    const handleClose = () => setShow(false);\n    const [groupName, setgroupName] = useState(\"\");\n    const [updateKeys] = useMutation(UPDATE_KEYS);\n    const [createMessage] = useMutation(SEND_MESSAGE);\n    const [createGroup] = useMutation(CREATE_GROUP, {\n        onCompleted({ createGroup }) {\n            const username = localStorage.getItem('username');\n            const privateKey = localStorage.getItem('temp-group-privatekey')\n            localStorage.setItem(`${createGroup.id}-privateKey`, privateKey);\n            localStorage.removeItem('temp-group-privatekey');\n            createGroup.users.map(user => {\n                const content = encryptMessageForPrivateKey(privateKey, user);\n                createMessage({ variables: { username, gid: createGroup.id, content, cType: `group-private-key-${user.username}` } });\n                return true;\n            });\n            updateKeys({variables: {username, keys: encryptLocalStorage()}});\n            handleClose();\n        }\n    });\n\n    const createGroupChat = (raw_tags, groupName) => {\n        raw_tags.push(localStorage.getItem('username')) // transparently include current user in every group they create\n        function onlyUnique(value, index, self) {\n            return self.indexOf(value) === index;\n        }\n        var tags = raw_tags.filter(onlyUnique);\n        if (tags && tags.length > 0) {\n            const x = Promise.resolve(generateGroupKeys(groupName)).then(function (array) {\n                const publicKey = array.publicKey\n                const privateKey = array.privateKey\n                localStorage.setItem('temp-group-privatekey', privateKey);\n                createGroup({ variables: { users: tags, publicKey: publicKey, name: groupName } });\n            });\n        }\n        else {\n            console.log(\"Error, you have no individuals to add to the group\")\n        }\n    }\n\n    return (\n        <div>\n            <Modal show={show} transparent={\"true\"} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Input the individuals to add to your new Group Chat!</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <TagsInput value={tags} onChange={(newTags) => setTags(newTags)} inputProps={{\n                        className: 'react-tagsinput-input',\n                        placeholder: 'Add people!'\n                    }} onlyUnique />\n                    <Form style={{marginTop: \"20px\"}}>\n                        <Form.Group>\n                            <Form.Control type=\"text\" placeholder=\"GroupName\" value={groupName} onChange={(e) => setgroupName(e.target.value)} />\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                        <Button variant=\"primary\" onClick={() => createGroupChat(tags, groupName)}>\n                            Create Group!\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>);\n}\nexport default GroupChatTags;\n","import React, { useState } from 'react';\nimport ChatLeftList from './ChatLeftList.react';\nimport ChatMessages from './ChatMessages.react';\nimport Button from 'react-bootstrap/Button';\nimport './../App.css';\n\nimport { ThemeProvider, darkTheme, elegantTheme, purpleTheme, defaultTheme } from '@livechat/ui-kit'\nimport GroupChatTags from './GroupChatTags.react';\n\nconst themes = {\n    defaultTheme: {\n        FixedWrapperMaximized: {\n            css: {\n                boxShadow: '0 0 1em rgba(0, 0, 0, 0.1)',\n            },\n        },\n        OwnMessage: {\n            ...defaultTheme.OwnMessage,\n            backgroundColor: '#456456',\n            secondaryTextColor: '#456456',\n        },\n    },\n    purpleTheme: {\n        ...purpleTheme,\n        TextComposer: {\n            ...purpleTheme.TextComposer,\n            css: {\n                ...purpleTheme.TextComposer.css,\n                marginTop: '1em',\n            },\n        },\n        OwnMessage: {\n            ...purpleTheme.OwnMessage,\n            secondaryTextColor: '#fff',\n        },\n    },\n    elegantTheme: {\n        ...elegantTheme,\n        Message: {\n            ...darkTheme.Message,\n            secondaryTextColor: '#fff',\n        },\n        OwnMessage: {\n            ...darkTheme.OwnMessage,\n            secondaryTextColor: '#fff',\n        },\n    },\n    darkTheme: {\n        ...darkTheme,\n        Message: {\n            ...darkTheme.Message,\n            css: {\n                ...darkTheme.Message.css,\n                color: '#fff',\n            },\n        },\n        OwnMessage: {\n            ...darkTheme.OwnMessage,\n            secondaryTextColor: '#fff',\n        },\n        TitleBar: {\n            ...darkTheme.TitleBar,\n            css: {\n                ...darkTheme.TitleBar.css,\n                padding: '1em',\n            },\n        },\n    },\n}\n\nfunction ChatMain() {\n    const [selectedGroup, setSelectedGroup] = useState(null);\n    const [doneFetching, setDoneFetching] = useState(false)\n    const [show, setShow] = useState(false);\n\n    const logout = () => {\n        localStorage.clear();\n        let fullURL = window.location.href.split('/');\n        fullURL.pop();\n        const baseURL = fullURL.join('/')\n        window.location.href = baseURL ;\n    }\n\n    return (<>\n    <GroupChatTags show={show} setShow={setShow} />\n        <ThemeProvider theme={themes.defaultTheme}>\n            <div style={{\n                height: \"100%\",\n                width: \"30%\",\n                position: \"fixed\",\n                zIndex: 1,\n                top: 0,\n                overflowX: 'hidden',\n                paddingTop: '20px',\n                left: 0\n            }}>\n                <div className=\"App\">\n                    <Button variant=\"primary\" style={{ marginRight: \"10px\" }} onClick={() => setShow(!show)}>Create Group Chat</Button>\n                    <Button variant=\"secondary\" onClick={logout}>Logout</Button>\n                </div>\n                <ChatLeftList selectedGroup={selectedGroup} setSelectedGroup={setSelectedGroup} setDoneFetching={setDoneFetching}>\n                </ChatLeftList>\n            </div>\n\n            <div style={{\n                height: \"100%\",\n                width: \"70%\",\n                position: \"fixed\",\n                zIndex: 1,\n                top: 0,\n                overflowX: 'hidden',\n                paddingTop: '20px',\n                right: 0,\n                border: \"1px solid rgba(0,0,0,0.1)\",\n            }}>\n                {\n                    selectedGroup && <ChatMessages selectedGroup={selectedGroup} doneFetching={doneFetching} setDoneFetching={setDoneFetching}></ChatMessages>\n                }\n            </div>\n        </ThemeProvider>\n    </>);\n}\n\nexport default ChatMain;","import React from 'react';\nimport './App.css';\nimport Register from './components/register.react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { ApolloClient, InMemoryCache, createHttpLink, ApolloProvider } from '@apollo/client';\nimport ChatMain from './components/ChatMain.react';\nimport { setContext } from '@apollo/client/link/context';\nimport { split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws';\n\nfunction App() {\n  const serverURL = process.env.PRODUCTION ? 'https://e2-chat.herokuapp.com' : 'http://localhost:4000';\n  const wsURL = process.env.PRODUCTION ? 'wss://e2-chat.herokuapp.com' : 'ws://localhost:4000';\n  const token = localStorage.getItem('token');\n  const httpLink = createHttpLink({\n    uri: `${serverURL}/graphql`,\n  });\n\n  const authLink = setContext((_, { headers }) => {\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `${token}` : \"\",\n      }\n    }\n  });\n  \n  const wsLink = new WebSocketLink({\n    uri: `${wsURL}/graphql`,\n    options: {\n      reconnect: true,\n      connectionParams: {\n        Authorization: token,\n      },\n    }\n  });\n  \n  const splitLink = split(\n    ({ query }) => {\n      const definition = getMainDefinition(query);\n      return (\n        definition.kind === 'OperationDefinition' &&\n        definition.operation === 'subscription'\n      );\n    },\n    wsLink,\n    authLink.concat(httpLink),\n  );\n\n  const client = new ApolloClient({\n    link: splitLink,\n    cache: new InMemoryCache()\n  });\n\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/main\">\n          <ApolloProvider client={client}>\n            <div>\n              <ChatMain></ChatMain>\n            </div>\n          </ApolloProvider>\n        </Route>\n        <Route path=\"/\">\n        <ApolloProvider client={client}>\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <Register />\n            </header>\n          </div>\n         </ApolloProvider>\n        </Route>\n      </Switch>\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}