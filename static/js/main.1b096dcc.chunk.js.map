{"version":3,"sources":["utils/AESEncryption.js","components/ChatLeftList.react.js","utils/files.js","components/ChatFeed.react.js","components/ChatMessages.react.js","utils/generateKeys.tsx","utils/localStorageKeyGen.ts","components/GroupChatTags.react.js","components/ChatMain.react.js","components/ChatMainApolloProvider.react.js","components/register.react.js","components/RegisterApolloProvider.react.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["encryptMessage","message","type","groupId","messageJSON","messageString","JSON","stringify","groupPrivateKey","localStorage","getItem","CryptoJS","AES","encrypt","toString","decryptMessage","decrypt","parse","enc","Utf8","decryptMessageForPrivateKey","crypt","JSEncrypt","setPrivateKey","GET_GROUPS","gql","GROUP_SUBSCRIPTION","ChatLeftList","selectedGroup","setSelectedGroup","setDoneFetching","client","username","useQuery","variables","subscribeToMore","loading","error","data","refetch","useEffect","subscribe","document","updateQuery","prev","subscriptionData","newGroup","setItem","id","privateKey","Object","assign","groupsByUser","resetStore","stringToColor","groupName","hash","i","length","charCodeAt","color","substr","dataSource","map","group","users","user","letterItem","letter","name","charAt","toUpperCase","alt","title","subtitle","join","date","Date","unread","className","onClick","chat","style","backgroundColor","convertFileToBase64","event","createMessage","target","files","reader","FileReader","readAsDataURL","onload","e","cType","includes","filename","encryptFile","result","gid","content","css","ChatFeed","messages","onLoadMore","messagesEndRef","doneFetching","React","createRef","messagesStartRef","window","lm","scrollIntoView","behavior","interval","setInterval","top","getBoundingClientRect","innerHeight","clearInterval","messagebox","position","sender","text","senderName","parseInt","ts","uri","status","click","width","height","filter","Boolean","marginLeft","marginRight","marginBottom","ref","el","lockable","toBottomHeight","onDownload","dataurl","arr","split","mime","match","bstr","atob","n","u8arr","Uint8Array","file","File","saveAs","dataURLtoFile","float","clear","GET_MESSAGES","MESSAGE_SUBSCRIPTION","override","ChatMessages","useState","setMessages","offset","limit","fetchPolicy","fetchMore","messageObjects","concat","messagesByGroup","reverse","subscription","newFeedItem","newMessage","size","fetchMoreResult","futureMessages","ab2str","buf","String","fromCharCode","apply","Array","from","exportCryptoPublicKey","key","a","crypto","subtle","exportKey","exported","exportedAsString","exportedAsBase64","btoa","pemExported","exportCryptoPrivateKey","generateKeys","modulus","generateKey","modulusLength","publicExponent","then","keyPair","publicKey","response","generatePasswordHash","password","pbkdf2","pbkdf2Sync","encryptLocalStorage","localStorageString","hashedPassword","setLocalStorage","localStorageDict","entries","value","console","CREATE_GROUP","SEND_MESSAGE","UPDATE_KEYS","GroupChatTags","show","setShow","tags","setTags","handleClose","setgroupName","useMutation","updateKeys","createPrivateKey","onCompleted","createGroup","removeItem","setPublicKey","encryptMessageForPrivateKey","keys","Modal","transparent","onHide","Header","closeButton","borderColor","Title","Body","onChange","newTags","inputProps","placeholder","onlyUnique","Form","marginTop","Group","Control","testid","Footer","Button","variant","raw_tags","push","index","self","indexOf","Promise","resolve","array","createGroupChat","themes","defaultTheme","FixedWrapperMaximized","boxShadow","OwnMessage","secondaryTextColor","purpleTheme","TextComposer","elegantTheme","Message","darkTheme","vars","TitleBar","padding","ChatMain","inputEl","useRef","fileUploader","theme","zIndex","overflowX","paddingTop","left","verticalAlign","fontSize","round","fullURL","location","href","pop","baseURL","right","borderLeft","styles","overflow","paddingLeft","bottom","defaultValue","multiline","onKeyPress","shiftKey","charCode","current","input","trim","preventDefault","rightButtons","display","newValue","ChatMainApolloProvider","PRODUCTION","serverURL","wsURL","token","httpLink","createHttpLink","authLink","setContext","_","headers","authorization","wsLink","WebSocketLink","options","reconnect","connectionParams","Authorization","splitLink","query","definition","getMainDefinition","kind","operation","ApolloClient","link","cache","InMemoryCache","customTheme","createMuiTheme","overrides","MuiFormLabel","root","MuiOutlinedInput","borderWidth","MuiInput","CREATE_USER","CREATE_TOKEN","GET_USER","Register","createUser","createToken","tab","loginPassword","registerPassword","createLoginToken","registerUsername","setRegisterUsername","setRegisterPassword","loginUsername","setLoginUsername","setLoginPassword","registerUsernameError","setRegisterUsernameError","loginError","setLoginError","buttonPressed","setButtonPressed","setTab","setKeys","myUsernameValue","registerUser","userData","loginUser","ThemeProvider","Tabs","fill","activeKey","onSelect","k","Tab","eventKey","TextField","InputProps","label","fullWidth","disabled","CircularProgress","Collapse","in","Alert","action","IconButton","aria-label","severity","RegisterApolloProvider","App","basename","path","hostname","ReactDOM","render","Fragment","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.1b096dcc.chunk.js","sourcesContent":["import JSEncrypt from 'jsencrypt';\nimport CryptoJS from \"crypto-js\";\n\nexport function encryptMessage(message, type, groupId){\n    var messageJSON = {\"message\": message, \"type\":type}\n    var messageString = JSON.stringify(messageJSON);\n    const groupPrivateKey = localStorage.getItem(`${groupId}-privateKey`);\n    const encrypted = CryptoJS.AES.encrypt(messageString, groupPrivateKey).toString();\n    return encrypted;\n}\n\nexport function decryptMessage(message, groupId){\n    const groupPrivateKey = localStorage.getItem(`${groupId}-privateKey`);\n    const decrypt = CryptoJS.AES.decrypt(message, groupPrivateKey);\n    return JSON.parse(decrypt.toString(CryptoJS.enc.Utf8));\n}\n\nexport function encryptMessageForPrivateKey(message, user){\n    var crypt = new JSEncrypt();\n    crypt.setPublicKey(user.publicKey);\n    const encrypted = crypt.encrypt(message);\n    return encrypted;\n}\n\nexport function decryptMessageForPrivateKey(message){\n    var crypt = new JSEncrypt();\n    crypt.setPrivateKey(localStorage.getItem('user-privateKey'));\n    const decrypted = crypt.decrypt(message);\n    return decrypted;\n}\n","import React, { useEffect } from 'react';\n\nimport {\n  gql,\n  useQuery\n} from '@apollo/client';\n\nimport { ChatList } from 'react-chat-elements'\nimport 'react-chat-elements/dist/main.css';\nimport './../App.css';\nimport 'react-chat-elements/dist/main.css';\n\nimport { decryptMessageForPrivateKey } from '../utils/AESEncryption';\n\nconst GET_GROUPS = gql`\n  query getGroupsWithUser($username: String!) {\n    groupsByUser(username: $username){\n      id\n      name\n      users {\n        username\n      }\n      privateKey\n    }\n  }\n`;\n\nconst GROUP_SUBSCRIPTION = gql`\n    subscription getNewGroups($username: String!){\n        newGroup(username: $username){\n          id\n          users{\n            username\n          }\n          name\n          publicKey\n          privateKey\n        }\n    }\n`;\n\nfunction ChatLeftList({ selectedGroup, setSelectedGroup, setDoneFetching, client }) {\n  const username = localStorage.getItem('username');\n\n  const {\n    subscribeToMore,\n    loading,\n    error,\n    data,\n    refetch\n  } = useQuery(GET_GROUPS, {\n    variables: {\n      username\n    }\n  });\n\n  useEffect(() => {\n    const subscribe = subscribeToMore({\n      document: GROUP_SUBSCRIPTION,\n      variables: { username },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const newGroup = subscriptionData.data.newGroup;\n        localStorage.setItem(`${newGroup.id}-privateKey`, decryptMessageForPrivateKey(newGroup.privateKey));\n        return Object.assign({}, prev, {\n          groupsByUser: [newGroup, ...prev.groupsByUser]\n        });\n      }\n    });\n    return function cleanup() {\n      subscribe();\n    };\n  }, [subscribeToMore, username]);\n\n\n  if (loading) return 'Loading...';\n  if (error) {\n    client.resetStore();\n    refetch();\n    return `Error! ${error.message}`;\n  }\n\n  const stringToColor = (groupName) => {\n    var hash = 0;\n    for (var i = 0; i < groupName.length; i++) {\n      hash = groupName.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    var color = '#';\n    for (var i = 0; i < 3; i++) {\n      var value = (hash >> (i * 8)) & 0xFF;\n      color += ('00' + value.toString(16)).substr(-2);\n    }\n    return color;\n  }\n\n  const dataSource = data.groupsByUser.map(group => {\n    if (localStorage.getItem(`${group.id}-privateKey`) == null || localStorage.getItem(`${group.id}-privateKey`) === 'undefined') {\n      localStorage.setItem(`${group.id}-privateKey`, decryptMessageForPrivateKey(group.privateKey));\n    }\n    const users = group.users.map(user => `@${user.username}`);\n    return {\n      letterItem: { letter: group.name.charAt(0).toUpperCase(), id: stringToColor(group.name) },\n      alt: group.name,\n      title: group.name,\n      subtitle: users.join(\", \"),\n      date: new Date(),\n      unread: 0,\n      id: group.id,\n      className: selectedGroup === group.id ? \"activeChatLeft\" : \"notActiveChatLeft\"\n    }\n  });\n\n\n  return (<ChatList onClick={(chat) => { setSelectedGroup(chat.id); setDoneFetching(false);}}\n    style={{\n      backgroundColor: \"#121212\"\n    }}\n    dataSource={dataSource} />)\n}\n\nexport default ChatLeftList;","// convert file to base64\n// base64 to encrypted\n// return base64\n\n/**\n * {\n *  content: xyz,\n *  filename: app.pdf\n * }\n * \n */\n\n// https://github.com/Detaysoft/react-chat-elements\n// https://stackoverflow.com/questions/46119987/upload-and-read-a-file-in-react\n\nimport CryptoJS from \"crypto-js\";\nimport { saveAs } from 'file-saver';\n\nexport const convertFileToBase64 = (event, groupId, createMessage, username) => {\n    if (event.target.files == null){\n        return;\n    }\n    const reader = new FileReader();\n    reader.readAsDataURL(event.target.files[0]); \n    reader.onload = function(e) {\n        const cType =  (event.target.files[0].type.includes(\"image/\")) ? 'photo' : 'file';\n        var rawLog = reader.result;\n        const message = encryptFile(rawLog, event.target.files[0].name, groupId);   \n        createMessage({ variables: { username, gid: groupId, content: message, cType } }); \n    };\n}\n\nexport function encryptFile(message, filename, groupId){\n    var messageJSON = {\"content\": message, \"filename\": filename};\n    var messageString = JSON.stringify(messageJSON);\n    const groupPrivateKey = localStorage.getItem(`${groupId}-privateKey`);\n    const encrypted = CryptoJS.AES.encrypt(messageString, groupPrivateKey).toString();\n    return encrypted;\n}\n\nexport function dataURLtoFile(dataurl, filename) {\n    var arr = dataurl.split(','),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]), \n        n = bstr.length, \n        u8arr = new Uint8Array(n);\n    while(n--){\n        u8arr[n] = bstr.charCodeAt(n);\n    }\n    const file = new File([u8arr], filename, {type:mime});\n    saveAs(file, filename);\n}\n","import React, { useEffect } from 'react';\nimport { ChatFeed as ChatFeedUI } from 'react-chat-ui';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { css } from \"@emotion/core\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-chat-elements/dist/main.css';\nimport { MessageList } from 'react-chat-elements'\nimport 'react-chat-elements/dist/main.css';\nimport {dataURLtoFile} from './../utils/files';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nfunction ChatFeed({\n    messages,\n    onLoadMore,\n    doneFetching,\n    selectedGroup,\n}) {\n    let messagesEndRef = React.createRef();\n    let messagesStartRef = React.createRef();\n\n    window.lm = onLoadMore;\n\n    useEffect(() => {\n        messagesEndRef.scrollIntoView({ behavior: \"smooth\" });\n        const interval = setInterval(() => {\n            const offset = 0;\n            if (!messagesStartRef) return false;\n            const top = messagesStartRef.getBoundingClientRect().top;\n            const inView = (top + offset) >= 0 && (top - offset) <= window.innerHeight;\n            if (inView) {\n                // onLoadMore();\n            }\n        }, 1000);\n        return function cleanup() {\n            clearInterval(interval);\n        }\n    }, [onLoadMore, messagesStartRef, messagesEndRef]);\n\n    const height = window.innerHeight * 0.86;\n    const username = localStorage.getItem('username');\n    const dataSource = messages.map(messagebox => {\n        if (messagebox.cType === \"text\") {\n            return {\n                position: messagebox.sender === username ? 'right' : 'left',\n                type: 'text',\n                text: messagebox.message.message,\n                title: messagebox.senderName,\n                date: new Date(parseInt(messagebox.ts)),\n            };\n        }\n        if (messagebox.cType === \"photo\") {\n            return {\n                position: messagebox.sender === username ? 'right' : 'left',\n                type: 'photo',\n                title: messagebox.senderName,\n                date: new Date(parseInt(messagebox.ts)),\n                data: {\n                    uri: messagebox.message.content,\n                    filename: messagebox.message.filename,\n                    status: {\n                        click: false,\n                        loading: 0,\n                    },\n                    width: \"300px\",\n                    height: \"150px\"\n                }\n            };\n        }\n        if (messagebox.cType === \"file\") {\n            return {\n                position: messagebox.sender === username ? 'right' : 'left',\n                type: 'file',\n                text: messagebox.message.filename,\n                title: messagebox.senderName,\n                date: new Date(parseInt(messagebox.ts)),\n                data: {\n                    uri: messagebox.message.content,\n                    status: {\n                        click: false,\n                        loading: 0,\n                    }\n                }\n            };\n        }\n        return null;\n    }).filter(Boolean);\n\n    return <div style={{ marginLeft: 5, marginRight: 5, marginBottom: 50 }}>\n\n        <div style={{ height: 30 }}\n            ref={(el) => { messagesStartRef = el; }}>\n            {\n                // doneFetching ? <div /> : <ClipLoader\n                //     css={override}\n                //     size={30}\n                //     color={\"#123abc\"}\n                //     loading={true}\n                // />\n            }\n        </div>\n        <div style={{ }}>\n            <MessageList\n                className='message-list'\n                lockable={true}\n                toBottomHeight={'86%'}\n                onDownload={(e) => {\n                    dataURLtoFile(e.data.uri, e.type === 'photo' ? e.data.filename : e.text)\n                }}\n                dataSource={dataSource}\n            />\n        </div>\n        <div style={{ float: \"left\", clear: \"both\" }}\n            ref={(el) => { messagesEndRef = el; }}>\n        </div>\n    </div>;\n}\n\nexport default ChatFeed;","import React, { useEffect, useState } from 'react';\n\nimport {\n    gql,\n    useQuery\n} from '@apollo/client';\nimport { css } from \"@emotion/core\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport ChatFeed from './ChatFeed.react';\nimport { decryptMessage } from '../utils/AESEncryption';\nimport 'react-chat-elements/dist/main.css';\n\nconst GET_MESSAGES = gql`\n    query getMessagesForGroup($gid: Int!, $offset: Int, $limit: Int) {\n        messagesByGroup(gid: $gid, count: $limit, offset: $offset){\n            id\n            content\n            ts\n            sender\n            group\n            cType\n        }\n    }\n`;\n\nconst MESSAGE_SUBSCRIPTION = gql`\n    subscription getNewMessages($gid: Int!){\n        newMessage(gid: $gid){\n            id\n            content\n            ts\n            sender\n            group\n            cType\n        }\n    }\n`;\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nfunction ChatMessages({\n    selectedGroup, doneFetching, setDoneFetching\n}) {\n    const [messages, setMessages] = useState([]);\n    const { subscribeToMore, loading, error, data, fetchMore } = useQuery(\n        GET_MESSAGES,\n        {\n            variables: {\n                gid: selectedGroup,\n                offset: 0,\n                limit: 50\n            },\n            fetchPolicy: \"network\"\n        }\n    );\n\n    useEffect(() => {\n        const username = localStorage.getItem('username');\n        if (data) {\n            const reversedEntries = [].concat(data.messagesByGroup).reverse();\n            const messageObjects = reversedEntries.map(message => {\n                if (localStorage.getItem(`${selectedGroup}-privateKey`) == null || localStorage.getItem(`${selectedGroup}-privateKey`) === 'undefined') {\n                    return null;\n                }\n                return { sender: message.sender, message: decryptMessage(message.content, selectedGroup), senderName: `@${message.sender}`, cType: message.cType, ts: message.ts };\n            }).filter(Boolean);\n            setMessages(messageObjects);\n        }\n        const subscription = subscribeToMore({\n            document: MESSAGE_SUBSCRIPTION,\n            variables: { gid: selectedGroup },\n            updateQuery: (prev, { subscriptionData }) => {\n                if (!subscriptionData.data) {\n                    setDoneFetching(true);\n                    return prev;\n                }\n                const newFeedItem = subscriptionData.data.newMessage;\n                const newMessage = { sender: newFeedItem.sender, message: decryptMessage(newFeedItem.content, selectedGroup), senderName: `@${newFeedItem.sender}`, cType: newFeedItem.cType, ts: newFeedItem.ts };\n                setMessages(messages => [...messages, newMessage]);\n                return Object.assign({}, prev, {\n                    messagesByGroup: [newFeedItem, ...prev.messagesByGroup]\n                });\n            }\n        });\n        return function cleanup() {\n            subscription();\n        };\n    }, [subscribeToMore, selectedGroup, data]);\n\n    if (loading) return (<div style={{ marginLeft: '10px', marginRight: '10px', marginBottom: '50px' }}>\n        <div style={{ height: '30px' }}>\n            {\n                !doneFetching && <ClipLoader\n                    css={override}\n                    size={30}\n                    color={\"#123abc\"}\n                    loading={true}\n                />\n            }\n        </div>\n    </div>);\n    if (error) return `Error! ${error.message}`;\n    return <ChatFeed messages={messages} selectedGroup={selectedGroup} doneFetching={doneFetching} onLoadMore={() => {\n        if (doneFetching) {\n            return;\n        }\n        return fetchMore({\n            variables: {\n                offset: data.messagesByGroup.length\n            },\n            updateQuery: (prev, { fetchMoreResult }) => {\n                if (fetchMoreResult.messagesByGroup.length === 0) {\n                    setDoneFetching(true);\n                }\n                const futureMessages = fetchMoreResult.messagesByGroup;\n                const username = localStorage.getItem('username');\n                const messageObjects = futureMessages.map(message => {\n                    if (localStorage.getItem(`${selectedGroup}-privateKey`) == null || localStorage.getItem(`${selectedGroup}-privateKey`) === 'undefined') {\n                        return null;\n                    }\n                    return { sender: message.sender, message: decryptMessage(message.content, selectedGroup), senderName: `@${message.sender}`, cType: message.cType, ts: message.ts };\n                }).filter(Boolean);\n                setMessages(messages => [...messages, ...messageObjects]);\n                return Object.assign({}, prev, {\n                    messagesByGroup: [...prev.messagesByGroup, ...fetchMoreResult.messagesByGroup],\n                });\n            }\n        })\n    }}>\n    </ChatFeed>;\n}\n\nexport default ChatMessages;","import '../App.css';\nimport pbkdf2 from 'pbkdf2';\n\nfunction ab2str(buf: any) {\n    return String.fromCharCode.apply(null, Array.from(new Uint8Array(buf)));\n}\n\nasync function exportCryptoPublicKey(key: any) {\n    const exported = await window.crypto.subtle.exportKey(\n        \"spki\",\n        key\n    );\n    const exportedAsString = ab2str(exported);\n    const exportedAsBase64 = window.btoa(exportedAsString);\n    const pemExported = `-----BEGIN PUBLIC KEY-----\\n${exportedAsBase64}\\n-----END PUBLIC KEY-----`;\n    return pemExported;\n}\n\nasync function exportCryptoPrivateKey(key: any) {\n    const exported = await window.crypto.subtle.exportKey(\n        \"pkcs8\",\n        key\n    );\n    const exportedAsString = ab2str(exported);\n    const exportedAsBase64 = window.btoa(exportedAsString);\n    const pemExported = `-----BEGIN PRIVATE KEY-----\\n${exportedAsBase64}\\n-----END PRIVATE KEY-----`;\n    return pemExported;\n}\n\n\nexport async function generateKeys(username: string, modulus: number) {\n    const response = await window.crypto.subtle.generateKey({\n        name: \"RSA-OAEP\",\n        modulusLength: modulus,\n        publicExponent: new Uint8Array([1, 0, 1]),\n        hash: \"SHA-256\",\n    },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    ).then(async (keyPair) => {\n        const publicKey = await exportCryptoPublicKey(keyPair.publicKey);\n        const privateKey = await exportCryptoPrivateKey(keyPair.privateKey);\n        return {\n            privateKey,\n            username,\n            publicKey\n        }\n    });\n    return response;\n}\n\n\nexport function generatePasswordHash(password: string){\n    var derivedKey = pbkdf2.pbkdf2Sync(password, 'salt', 1, 32, 'sha512').toString('hex');\n    return derivedKey;\n}","import CryptoJS from \"crypto-js\";\n\nexport function encryptLocalStorage() {\n    const localStorageString = JSON.stringify(localStorage);\n    const hashedPassword: string = localStorage.getItem('password') || '';\n    const encrypted = CryptoJS.AES.encrypt(localStorageString, hashedPassword).toString();\n    return encrypted;\n}\n\nexport function setLocalStorage(localStorageString: string, hashedPassword: string) {\n    const decrypt = CryptoJS.AES.decrypt(localStorageString, hashedPassword);\n    try{\n        const localStorageDict = JSON.parse(decrypt.toString(CryptoJS.enc.Utf8));\n        for (const [key, value] of Object.entries(localStorageDict)) {\n            localStorage.setItem(key, (value as string));\n        }\n    }\n    catch(e){\n        console.error(e);\n        return false;\n    }\n    return true;\n}","import React, { useState } from 'react';\nimport TagsInput from 'react-tagsinput'\nimport 'react-tagsinput/react-tagsinput.css'\nimport { gql, useMutation } from '@apollo/client';\nimport { generateKeys } from '../utils/generateKeys'\nimport { encryptMessageForPrivateKey } from '../utils/AESEncryption';\nimport {encryptLocalStorage} from '../utils/localStorageKeyGen';\n\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst CREATE_GROUP = gql`\nmutation createGroup($name: String!, $publicKey: String!, $users: [String!]){\n    createGroup(name:$name, publicKey:$publicKey, users:$users){\n      id\n      name\n      publicKey\n      users{\n          username\n          publicKey\n      }\n    }\n  }\n`;\n\nconst SEND_MESSAGE = gql`\n    mutation createPrivateKey($username: String!, $privateKey: String!, $gid: Int!){\n        createPrivateKey(username:$username, gid:$gid, privateKey:$privateKey){\n            id\n            privateKey\n        }\n    }\n`;\n\nconst UPDATE_KEYS = gql`\n    mutation updateKeys($username: String!, $keys: String!){\n        updateKeys(username:$username, keys:$keys){\n            success\n        }\n    }\n`;\n\nfunction GroupChatTags({ show, setShow }) {\n    const [tags, setTags] = useState([]);\n\n    const handleClose = () => setShow(false);\n    const [groupName, setgroupName] = useState(\"\");\n    const [updateKeys] = useMutation(UPDATE_KEYS);\n    const [createPrivateKey] = useMutation(SEND_MESSAGE);\n    const [createGroup] = useMutation(CREATE_GROUP, {\n        onCompleted({ createGroup }) {\n            const username = localStorage.getItem('username');\n            const privateKey = localStorage.getItem('temp-group-privatekey')\n            localStorage.setItem(`${createGroup.id}-privateKey`, privateKey);\n            localStorage.removeItem('temp-group-privatekey');\n            createGroup.users.map(user => {\n                const content = encryptMessageForPrivateKey(privateKey, user);\n                createPrivateKey({ variables: { username: user.username, gid: createGroup.id, privateKey: content} });\n                return true;\n            });\n            updateKeys({variables: {username, keys: encryptLocalStorage()}});\n            handleClose();\n        }\n    });\n\n    const createGroupChat = (raw_tags, groupName) => {\n        raw_tags.push(localStorage.getItem('username')) // transparently include current user in every group they create\n        function onlyUnique(value, index, self) {\n            return self.indexOf(value) === index;\n        }\n        var tags = raw_tags.filter(onlyUnique);\n        if (tags && tags.length > 0) {\n            Promise.resolve(generateKeys(groupName, 256)).then(function (array) {\n                const publicKey = array.publicKey\n                const privateKey = array.privateKey\n                localStorage.setItem('temp-group-privatekey', privateKey);\n                createGroup({ variables: { users: tags, publicKey: publicKey, name: groupName } });\n            });\n        }\n    }\n\n    return (\n        <div style={{backgroundColor: \"#2e2e2e\"}}>\n            <Modal show={show} transparent={\"true\"} onHide={handleClose}>\n                <Modal.Header closeButton style={{backgroundColor: \"#2e2e2e\", borderColor: \"#2e2e2e\"}}>\n                    <Modal.Title>Input the individuals to add to your new Group Chat!</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body style={{backgroundColor: \"#2e2e2e\", borderColor: \"#2e2e2e\"}}>\n                    <TagsInput style={{color: \"white\"}} value={tags} onChange={(newTags) => setTags(newTags)} inputProps={{\n                        className: 'react-tagsinput-input',\n                        placeholder: 'Add people!'\n                    }} onlyUnique />\n                    <Form style={{marginTop: \"20px\"}}>\n                        <Form.Group>\n                            <Form.Control testid={\"createGroupInputField\"} style={{color: \"black\"}} type=\"text\" placeholder=\"Group Name\" value={groupName} onChange={(e) => setgroupName(e.target.value)} />\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer style={{backgroundColor: \"#2e2e2e\", borderColor: \"#2e2e2e\"}}>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                        <Button variant=\"primary\" onClick={() => createGroupChat(tags, groupName)}>\n                            Create Group!\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>);\n}\nexport default GroupChatTags;\n","import React, { useState, useRef } from 'react';\nimport ChatLeftList from './ChatLeftList.react';\nimport ChatMessages from './ChatMessages.react';\nimport Button from 'react-bootstrap/Button';\nimport './../App.css';\nimport {\n    gql,\n    useMutation\n} from '@apollo/client';\nimport Avatar from 'react-avatar';\nimport { Input, Button as ChatButton } from 'react-chat-elements'\nimport { ThemeProvider, darkTheme, elegantTheme, purpleTheme, defaultTheme } from '@livechat/ui-kit'\nimport GroupChatTags from './GroupChatTags.react';\nimport { encryptMessage } from '../utils/AESEncryption';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-chat-elements/dist/main.css';\nimport {convertFileToBase64} from './../utils/files';\n\nconst SEND_MESSAGE = gql`\n    mutation SendMessage($username: String!, $content: String!, $gid: Int!, $cType: String!){\n        createMessage(sender:$username, group:$gid, content:$content, cType:$cType){\n            id\n            content\n            ts\n        }\n    }\n`;\nconst themes = {\n    defaultTheme: {\n        FixedWrapperMaximized: {\n            css: {\n                boxShadow: '0 0 1em rgba(0, 0, 0, 0.1)',\n            },\n        },\n        OwnMessage: {\n            ...defaultTheme.OwnMessage,\n            backgroundColor: '#456456',\n            secondaryTextColor: '#456456',\n        },\n    },\n    purpleTheme: {\n        ...purpleTheme,\n        TextComposer: {\n            ...purpleTheme.TextComposer,\n            css: {\n                ...purpleTheme.TextComposer.css,\n                marginTop: '1em',\n            },\n        },\n        OwnMessage: {\n            ...purpleTheme.OwnMessage,\n            secondaryTextColor: '#fff',\n        },\n    },\n    elegantTheme: {\n        ...elegantTheme,\n        Message: {\n            ...darkTheme.Message,\n            secondaryTextColor: '#fff',\n        },\n        OwnMessage: {\n            ...darkTheme.OwnMessage,\n            secondaryTextColor: '#fff',\n        },\n    },\n    darkTheme: {\n        ...darkTheme,\n        vars: {\n            ...darkTheme.vars,\n            \"tertiary-color\": \"rgba(40, 40, 40, 0.8)\"\n        },\n        Message: {\n            ...darkTheme.Message,\n            css: {\n                ...darkTheme.Message.css,\n                color: '#fff',\n            },\n        },\n        OwnMessage: {\n            ...darkTheme.OwnMessage,\n            secondaryTextColor: '#fff',\n        },\n        TitleBar: {\n            ...darkTheme.TitleBar,\n            css: {\n                ...darkTheme.TitleBar.css,\n                padding: '1em',\n            },\n        },\n    },\n}\n\nfunction ChatMain({ client }) {\n    const inputEl = useRef(null);\n    const fileUploader = useRef(null);\n    const username = localStorage.getItem('username');\n    const [messageInput, setMessageInput] = useState(\"\");\n    const [createMessage] = useMutation(SEND_MESSAGE);\n\n    const [selectedGroup, setSelectedGroup] = useState(null);\n    const [doneFetching, setDoneFetching] = useState(false)\n    const [show, setShow] = useState(false);\n\n\n    const logout = () => {\n        localStorage.clear();\n        let fullURL = window.location.href.split('/');\n        fullURL.pop();\n        const baseURL = fullURL.join('/')\n        window.location.href = baseURL;\n    }\n\n    return (<div className=\"main\">\n        <GroupChatTags show={show} setShow={setShow} />\n        <ThemeProvider theme={themes.darkTheme}>\n            <div style={{\n                height: \"100%\",\n                width: \"30%\",\n                position: \"fixed\",\n                zIndex: 1,\n                top: 0,\n                overflowX: 'hidden',\n                paddingTop: '20px',\n                left: 0\n            }}>\n                <div style={{ verticalAlign: 'middle', fontSize: 24 }}>\n                    <Avatar name={username} size={50} round style={{ marginBottom: 20, marginLeft: 25 }} title={`@${username}`} /> {`@${username}`}\n                </div>\n                <div className=\"App\" style={{ marginBottom: 10 }}>\n                    <Button variant=\"primary\" style={{ marginRight: \"10px\" }} onClick={() => setShow(!show)}>Create Group Chat</Button>\n                    <Button variant=\"secondary\" onClick={logout}>Logout</Button>\n                </div>\n                <ChatLeftList client={client} selectedGroup={selectedGroup} setSelectedGroup={setSelectedGroup} setDoneFetching={setDoneFetching}>\n                </ChatLeftList>\n            </div>\n\n            <div style={{\n                height: \"100%\",\n                width: \"70%\",\n                position: \"fixed\",\n                zIndex: 1,\n                top: 0,\n                overflowX: 'hidden',\n                right: 0,\n                borderLeft: \"1px solid white\",\n            }}>\n                {\n                    selectedGroup && (\n                        <>\n                        <div styles={{overflow:\"hidden\"}}>\n                            <div style = {{height:\"90%\", position:\"relative\",}}>\n                                <ChatMessages selectedGroup={selectedGroup} doneFetching={doneFetching} setDoneFetching={setDoneFetching} />\n                            </div>\n                            <div style = {{paddingLeft: \"1px\", height:\"5%\", bottom:\"1%\", position:\"fixed\", width:\"68%\"}}>\n                                <Input\n                                    placeholder=\"Enter message\"\n                                    defaultValue=\"\"\n                                    ref={inputEl}\n                                    multiline={true}\n                                    // buttonsFloat='left'\n                                    // maxHeight= {0}\n                                    // minHeight = {0}\n                                    // autoHeight = {false}\n                                    onKeyPress={(e) => {\n                                        if (e.shiftKey && e.charCode === 13) {\n                                            return true;\n                                        }\n                                        if (e.charCode === 13 && inputEl.current.input.value.trim()!==\"\") {\n                                            createMessage({ variables: { username, gid: selectedGroup, content: encryptMessage(inputEl.current.input.value, \"text\", selectedGroup), cType: \"text\" } });\n                                            inputEl.current.clear();\n                                            e.preventDefault();\n                                            return false;\n                                        }\n                                    }}\n                                    rightButtons={\n                                        <>\n                                            <input\n                                                id=\"raised-button-file\"\n                                                style = {{display:\"none\"}}\n                                                type=\"file\"\n                                                ref={fileUploader}\n                                                onChange={(event, newValue) => {\n                                                    convertFileToBase64(event, selectedGroup, createMessage, username)\n                                                    // createMessage({ variables: { username, gid: selectedGroup, content: convertFileToBase64(event, selectedGroup), cType: \"file\" } });\n                                                    event.preventDefault();\n                                                }}\n                                            />\n                                        <ChatButton text='Upload' onClick={()=>{fileUploader.current.click()}}>\n                                        </ChatButton>\n                                        <ChatButton\n                                        text='Send'\n                                        onClick={(e) => {\n                                            if(inputEl.current.input.value.trim()!==\"\"){\n                                                createMessage({ variables: { username, gid: selectedGroup, content: encryptMessage(inputEl.current.input.value, \"text\", selectedGroup), cType: \"text\" } });\n                                                inputEl.current.clear();\n                                                e.preventDefault();\n                                            }\n                                        }} />\n                                    </>\n                                    } />\n                            </div>\n                        </div>\n                        </>\n                    )}\n            </div>\n        </ThemeProvider>\n    </div >);\n}\n\nexport default ChatMain;","import React from 'react';\nimport './../App.css';\nimport { ApolloClient, InMemoryCache, createHttpLink, ApolloProvider } from '@apollo/client';\nimport ChatMain from './ChatMain.react';\nimport { setContext } from '@apollo/client/link/context';\nimport { split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws';\n\nfunction ChatMainApolloProvider() {\n    const PRODUCTION = window.location.href.includes(\"https://rithik.me/\");\n    const serverURL = PRODUCTION ? 'https://e2-chat.herokuapp.com' : 'http://localhost:4000';\n    const wsURL = PRODUCTION ? 'wss://e2-chat.herokuapp.com' : 'ws://localhost:4000';\n    const token = localStorage.getItem('token');\n    const httpLink = createHttpLink({\n        uri: `${serverURL}/graphql`,\n    });\n\n    const authLink = setContext((_, { headers }) => {\n        return {\n            headers: {\n                ...headers,\n                authorization: token ? `${token}` : \"\",\n            }\n        }\n    });\n\n    const wsLink = new WebSocketLink({\n        uri: `${wsURL}/graphql`,\n        options: {\n            reconnect: true,\n            connectionParams: {\n                Authorization: token,\n            },\n        }\n    });\n\n    const splitLink = split(\n        ({ query }) => {\n            const definition = getMainDefinition(query);\n            return (\n                definition.kind === 'OperationDefinition' &&\n                definition.operation === 'subscription'\n            );\n        },\n        wsLink,\n        authLink.concat(httpLink),\n    );\n\n    const client = new ApolloClient({\n        link: splitLink,\n        cache: new InMemoryCache()\n    });\n\n    return (<ApolloProvider client={client}>\n        <div>\n            <ChatMain client={client} />\n        </div>\n    </ApolloProvider>);\n}\n\nexport default ChatMainApolloProvider;\n","import React, { useState } from 'react';\nimport './../App.css';\nimport { generateKeys, generatePasswordHash } from '../utils/generateKeys'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField'\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport Alert from '@material-ui/lab/Alert';\nimport IconButton from '@material-ui/core/IconButton';\nimport Collapse from '@material-ui/core/Collapse';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport { encryptLocalStorage, setLocalStorage } from '../utils/localStorageKeyGen';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\n\nconst customTheme = createMuiTheme({\n\toverrides: {\n\t\tMuiFormLabel: { root: { color: 'white', borderColor: 'white' } },\n\t\tMuiOutlinedInput: {\n\t\t\troot: {\n\t\t\t\t'& $notchedOutline': {\n\t\t\t\t\tborderColor: 'rgba(255, 255, 255, 0.23)',\n\t\t\t\t},\n\t\t\t\t'&:hover:not($disabled):not($focused):not($error) $notchedOutline': {\n\t\t\t\t\tborderColor: '#4A90E2',\n\t\t\t\t\t'@media (hover: none)': {\n\t\t\t\t\t\tborderColor: 'rgba(255, 255, 255, 0.23)',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t'&$focused $notchedOutline': {\n\t\t\t\t\tborderColor: '#4A90E2',\n\t\t\t\t\tborderWidth: 1,\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\tMuiInput: {\n\t\t\tinput: {\n\t\t\t\t\"&::placeholder\": {\n\t\t\t\t\tcolor: \"gray\"\n\t\t\t\t},\n\t\t\t\tcolor: \"white\", // if you also want to change the color of the input, this is the prop you'd use\n\t\t\t}\n\t\t}\n\t}\n});\n\n\nconst CREATE_USER = gql`\n\tmutation CreateUser($username: String!, $publicKey: String!){\n\t  createUser(username:$username, publicKey:$publicKey){\n\t    id\n\t    username\n\t    publicKey\n\t  }\n\t}\n`;\nconst CREATE_TOKEN = gql`\n\tmutation CreateToken($username: String!, $publicKey: String!){\n\t\t  createToken(username:$username, publicKey:$publicKey){\n\t\t    token\n\t\t    username\n\t\t}\n\t}\n`;\nconst GET_USER = gql`\n\tquery User($username: String!){\n\t\tuser(username:$username){\n\t\t\tusername\n\t\t\tid\n\t\t\tkeys\n\t\t}\n\t}\n`;\n\nconst UPDATE_KEYS = gql`\n    mutation updateKeys($username: String!, $keys: String!){\n        updateKeys(username:$username, keys:$keys){\n            success\n        }\n    }\n`;\n\n// register the user\nfunction Register() {\n\tconst [updateKeys] = useMutation(UPDATE_KEYS);\n\tconst [createUser] = useMutation(CREATE_USER, {\n\t\tonCompleted({ createUser }) {\n\t\t\tconst username = createUser.username;\n\t\t\tconst publicKey = createUser.publicKey;\n\t\t\tcreateToken({ variables: { username, publicKey } });\n\t\t}\n\t});\n\tconst [createToken] = useMutation(CREATE_TOKEN, {\n\t\tonCompleted({ createToken }) {\n\t\t\tconst password = tab === 'login' ? loginPassword : registerPassword;\n\t\t\tlocalStorage.setItem('token', createToken.token);\n\t\t\tlocalStorage.setItem('username', createToken.username);\n\t\t\tlocalStorage.setItem('password', generatePasswordHash(password));\n\t\t\tupdateKeys({ variables: { username: createToken.username, keys: encryptLocalStorage() } });\n\t\t\twindow.location.href = window.location.href + 'main';\n\t\t}\n\t});\n\n\tconst [createLoginToken] = useMutation(CREATE_TOKEN, {\n\t\tonCompleted({ createToken }) {\n\t\t\tlocalStorage.setItem('token', createToken.token);\n\t\t\twindow.location.href = window.location.href + 'main';\n\t\t}\n\t});\n\n\tconst [registerUsername, setRegisterUsername] = useState('');\n\tconst [registerPassword, setRegisterPassword] = useState('');\n\n\tconst [loginUsername, setLoginUsername] = useState('');\n\tconst [loginPassword, setLoginPassword] = useState('');\n\n\tconst [registerUsernameError, setRegisterUsernameError] = useState(false);\n\tconst [loginError, setLoginError] = useState(false);\n\n\tconst [buttonPressed, setButtonPressed] = useState(false);\n\n\tconst [tab, setTab] = useState('login');\n\n\tconst { error, refetch } = useQuery(GET_USER, {\n\t\tvariables: { username: tab === 'login' ? loginUsername : registerUsername },\n\t});\n\n\tconst setKeys = async (myUsernameValue) => {\n\t\tconst username = tab === 'login' ? loginUsername : registerUsername;\n\t\tPromise.resolve(generateKeys(myUsernameValue, 4096)).then(function (array) {\n\t\t\tconst publicKey = array.publicKey\n\t\t\tconst privateKey = array.privateKey\n\t\t\tcreateUser({ variables: { username, publicKey } });\n\t\t\tlocalStorage.setItem('user-publicKey', publicKey);\n\t\t\tlocalStorage.setItem('user-privateKey', privateKey);\n\t\t\tlocalStorage.setItem('username', username);\n\t\t});\n\t}\n\n\tconst registerUser = async () => {\n\t\tconst { data: userData } = await refetch({ username: registerUsername });\n\t\tif (error) {\n\t\t\tsetKeys(registerUsername);\n\t\t}\n\t\telse {\n\t\t\tif (userData.user == null) {\n\t\t\t\tsetRegisterUsernameError(false);\n\t\t\t\tsetKeys(registerUsername);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsetRegisterUsernameError(true);\n\t\t\t\tsetButtonPressed(false);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst loginUser = async () => {\n\t\tconst { data: userData } = await refetch({ username: loginUsername });\n\t\tif (error) {\n\t\t\tconsole.error(error);\n\t\t\tsetLoginError(true);\n\t\t\tsetButtonPressed(false);\n\t\t}\n\t\telse {\n\t\t\tif (userData.user === null) {\n\t\t\t\tsetLoginError(true);\n\t\t\t\tsetButtonPressed(false);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst hashedPassword = generatePasswordHash(loginPassword);\n\t\t\t\tconst success = setLocalStorage(userData.user.keys, hashedPassword);\n\t\t\t\tif (success) {\n\t\t\t\t\tconst username = localStorage.getItem('username');\n\t\t\t\t\tconst publicKey = localStorage.getItem('user-publicKey');\n\t\t\t\t\tcreateLoginToken({ variables: { username, publicKey } });\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsetLoginError(true);\n\t\t\t\t\tsetButtonPressed(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (\n\t\t<ThemeProvider theme={customTheme}>\n\t\t\t<Tabs fill={true}\n\t\t\t\tid=\"controlled-tab-example\"\n\t\t\t\tclassName=\"tabHeadings\"\n\t\t\t\tactiveKey={tab}\n\t\t\t\tonSelect={(k) => setTab(k)}\n\t\t\t>\n\t\t\t\t<Tab eventKey=\"login\" title=\"Login\">\n\t\t\t\t\t<div className=\"register\">\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\t\tstyle: { color: \"white\" },\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tid=\"outlined-basic\" label=\"Username\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={loginUsername}\n\t\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\t\tonChange={(e) => setLoginUsername(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\t\tstyle: { color: \"white\" },\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tid=\"outlined-basic\" label=\"Password\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={loginPassword}\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\t\tonChange={(e) => setLoginPassword(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Button disabled={buttonPressed} onClick={(e) => {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\tsetButtonPressed(true);\n\t\t\t\t\t\t\tloginUser()\n\t\t\t\t\t\t}} variant=\"contained\" color=\"secondary\">\n\t\t\t\t\t\t\t{buttonPressed && <CircularProgress\n\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\tstyle={{ color: 'white', marginRight: '10px' }}\n\t\t\t\t\t\t\t/>} Login\n\t\t\t</Button>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Collapse in={loginError}>\n\t\t\t\t\t\t\t<Alert\n\t\t\t\t\t\t\t\taction={\n\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\taria-label=\"close\"\n\t\t\t\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetLoginError(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<CloseIcon fontSize=\"inherit\" />\n\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvariant=\"filled\" severity=\"error\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tInvalid Login\n\t\t\t\t</Alert>\n\t\t\t\t\t\t</Collapse>\n\n\t\t\t\t\t</div>\n\t\t\t\t</Tab>\n\t\t\t\t<Tab eventKey=\"register\" title=\"Register\">\n\t\t\t\t\t<div className=\"register\">\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\t\tstyle: { color: \"white\" },\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tid=\"outlined-basic\" label=\"Username\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={registerUsername}\n\t\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\t\tonChange={(e) => setRegisterUsername(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\t\tstyle: { color: \"white\" },\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tid=\"outlined-basic\" label=\"Password\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={registerPassword}\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\t\tonChange={(e) => setRegisterPassword(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Button disabled={buttonPressed} onClick={(e) => {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\tsetButtonPressed(true);\n\t\t\t\t\t\t\tregisterUser();\n\t\t\t\t\t\t}} variant=\"contained\" color=\"secondary\">\n\t\t\t\t\t\t\t{buttonPressed && <CircularProgress\n\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\tstyle={{ color: 'white', marginRight: '10px' }}\n\t\t\t\t\t\t\t/>} Register\n\t\t\t</Button>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Collapse in={registerUsernameError}>\n\t\t\t\t\t\t\t<Alert\n\t\t\t\t\t\t\t\taction={\n\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\taria-label=\"close\"\n\t\t\t\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRegisterUsernameError(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<CloseIcon fontSize=\"inherit\" />\n\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvariant=\"filled\" severity=\"error\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tInvalid username - choose a unique username\n\t\t\t\t</Alert>\n\t\t\t\t\t\t</Collapse>\n\n\t\t\t\t\t</div>\n\t\t\t\t</Tab>\n\t\t\t</Tabs>\n\t\t</ThemeProvider>\n\t);\n}\n\nexport default Register;\n","import React from 'react';\nimport './../App.css';\nimport Register from './register.react'\nimport { ApolloClient, InMemoryCache, createHttpLink, ApolloProvider } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws';\n\nfunction RegisterApolloProvider() {\n    const PRODUCTION = window.location.href.includes(\"https://rithik.me/\");\n    const serverURL = PRODUCTION ? 'https://e2-chat.herokuapp.com' : 'http://localhost:4000';\n    const wsURL = PRODUCTION ? 'wss://e2-chat.herokuapp.com' : 'ws://localhost:4000';\n    const token = localStorage.getItem('token');\n    const httpLink = createHttpLink({\n        uri: `${serverURL}/graphql`,\n    });\n\n    const authLink = setContext((_, { headers }) => {\n        return {\n            headers: {\n                ...headers,\n                authorization: token ? `${token}` : \"\",\n            }\n        }\n    });\n\n    const wsLink = new WebSocketLink({\n        uri: `${wsURL}/graphql`,\n        options: {\n            reconnect: true,\n            connectionParams: {\n                Authorization: token,\n            },\n        }\n    });\n\n    const splitLink = split(\n        ({ query }) => {\n            const definition = getMainDefinition(query);\n            return (\n                definition.kind === 'OperationDefinition' &&\n                definition.operation === 'subscription'\n            );\n        },\n        wsLink,\n        authLink.concat(httpLink),\n    );\n\n    const client = new ApolloClient({\n        link: splitLink,\n        cache: new InMemoryCache()\n    });\n\n    return (<ApolloProvider client={client}>\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Register />\n            </header>\n        </div>\n    </ApolloProvider>);\n}\n\nexport default RegisterApolloProvider;\n","import React from 'react';\nimport './App.css';\nimport {\n  Switch,\n  Route,\n  HashRouter\n} from \"react-router-dom\";\nimport ChatMainApolloProvider from './components/ChatMainApolloProvider.react';\nimport RegisterApolloProvider from './components/RegisterApolloProvider.react';\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n      <Switch>\n        <Route path=\"/main\">\n          <ChatMainApolloProvider />\n        </Route>\n        <Route path=\"/\">\n          <RegisterApolloProvider />\n        </Route>\n      </Switch>\n    </HashRouter>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}