{"version":3,"sources":["utils/AESEncryption.js","components/ChatLeftList.react.js","components/ChatFeed.react.js","components/ChatMessages.react.js","utils/generateKeys.tsx","utils/localStorageKeyGen.ts","components/GroupChatTags.react.js","components/ChatMain.react.js","components/ChatMainApolloProvider.react.js","components/register.react.js","components/RegisterApolloProvider.react.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["encryptMessage","message","type","groupId","messageJSON","messageString","JSON","stringify","groupPrivateKey","localStorage","getItem","CryptoJS","AES","encrypt","toString","decryptMessage","decrypt","parse","enc","Utf8","decryptMessageForPrivateKey","crypt","JSEncrypt","setPrivateKey","GET_GROUPS","gql","GROUP_SUBSCRIPTION","ChatLeftList","selectedGroup","setSelectedGroup","setDoneFetching","client","username","useQuery","variables","subscribeToMore","loading","error","data","refetch","useEffect","subscribe","document","updateQuery","prev","subscriptionData","newGroup","setItem","id","privateKey","Object","assign","groupsByUser","resetStore","groupDivs","map","group","users","user","key","style","backgroundColor","onClick","active","letter","name","charAt","toUpperCase","color","fill","justify","ellipsis","join","maxWidth","override","css","ChatFeed","entries","onLoadMore","doneFetching","messagesEndRef","React","createRef","messagesStartRef","window","lm","reversedEntries","concat","messagesByGroup","reverse","messages","Message","sender","content","senderName","filter","Boolean","scrollIntoView","behavior","interval","setInterval","top","getBoundingClientRect","innerHeight","clearInterval","height","marginLeft","marginRight","marginBottom","ref","el","size","maxHeight","showSenderName","bubblesCentered","bubbleStyles","text","fontSize","chatbubble","borderRadius","padding","userBubble","float","clear","GET_MESSAGES","MESSAGE_SUBSCRIPTION","ChatMessages","gid","offset","limit","fetchPolicy","fetchMore","subscription","console","log","newFeedItem","newMessage","length","fetchMoreResult","ab2str","buf","String","fromCharCode","apply","Array","from","Uint8Array","exportCryptoPublicKey","a","crypto","subtle","exportKey","exported","exportedAsString","exportedAsBase64","btoa","pemExported","exportCryptoPrivateKey","generateKeys","modulus","generateKey","modulusLength","publicExponent","hash","then","keyPair","publicKey","response","generatePasswordHash","password","pbkdf2","pbkdf2Sync","encryptLocalStorage","localStorageString","hashedPassword","setLocalStorage","localStorageDict","value","e","CREATE_GROUP","SEND_MESSAGE","UPDATE_KEYS","GroupChatTags","show","setShow","useState","tags","setTags","handleClose","groupName","setgroupName","useMutation","updateKeys","createPrivateKey","onCompleted","createGroup","removeItem","setPublicKey","encryptMessageForPrivateKey","keys","Modal","transparent","onHide","Header","closeButton","borderColor","Title","Body","onChange","newTags","inputProps","className","placeholder","onlyUnique","Form","marginTop","Group","Control","testid","target","Footer","Button","variant","raw_tags","push","index","self","indexOf","Promise","resolve","array","createGroupChat","themes","defaultTheme","FixedWrapperMaximized","boxShadow","OwnMessage","secondaryTextColor","purpleTheme","TextComposer","elegantTheme","darkTheme","vars","TitleBar","ChatMain","messageInput","setMessageInput","createMessage","theme","width","position","zIndex","overflowX","paddingTop","left","verticalAlign","round","title","fullURL","location","href","split","pop","baseURL","right","border","bottom","display","onKeyPress","event","preventDefault","cType","ChatMainApolloProvider","PRODUCTION","includes","serverURL","wsURL","token","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","wsLink","WebSocketLink","options","reconnect","connectionParams","Authorization","splitLink","query","definition","getMainDefinition","kind","operation","ApolloClient","link","cache","InMemoryCache","customTheme","createMuiTheme","overrides","MuiFormLabel","root","MuiOutlinedInput","borderWidth","MuiInput","input","CREATE_USER","CREATE_TOKEN","GET_USER","Register","createUser","createToken","tab","loginPassword","registerPassword","createLoginToken","registerUsername","setRegisterUsername","setRegisterPassword","loginUsername","setLoginUsername","setLoginPassword","registerUsernameError","setRegisterUsernameError","loginError","setLoginError","buttonPressed","setButtonPressed","setTab","setKeys","myUsernameValue","registerUser","userData","loginUser","ThemeProvider","Tabs","activeKey","onSelect","k","Tab","eventKey","TextField","InputProps","label","fullWidth","disabled","CircularProgress","Collapse","in","Alert","action","IconButton","aria-label","severity","RegisterApolloProvider","App","basename","path","hostname","match","ReactDOM","render","Fragment","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.56b8a5f2.chunk.js","sourcesContent":["import JSEncrypt from 'jsencrypt';\nimport CryptoJS from \"crypto-js\";\n\nexport function encryptMessage(message, type, groupId){\n    var messageJSON = {\"message\": message, \"type\":type}\n    var messageString = JSON.stringify(messageJSON);\n    const groupPrivateKey = localStorage.getItem(`${groupId}-privateKey`);\n    const encrypted = CryptoJS.AES.encrypt(messageString, groupPrivateKey).toString();\n    return encrypted;\n}\n\nexport function decryptMessage(message, groupId){\n    const groupPrivateKey = localStorage.getItem(`${groupId}-privateKey`);\n    const decrypt = CryptoJS.AES.decrypt(message, groupPrivateKey);\n    return JSON.parse(decrypt.toString(CryptoJS.enc.Utf8));\n}\n\nexport function encryptMessageForPrivateKey(message, user){\n    var crypt = new JSEncrypt();\n    crypt.setPublicKey(user.publicKey);\n    const encrypted = crypt.encrypt(message);\n    return encrypted;\n}\n\nexport function decryptMessageForPrivateKey(message){\n    var crypt = new JSEncrypt();\n    crypt.setPrivateKey(localStorage.getItem('user-privateKey'));\n    const decrypted = crypt.decrypt(message);\n    return decrypted;\n}\n","import React, { useEffect } from 'react';\n\nimport {\n  gql,\n  useQuery\n} from '@apollo/client';\n\nimport { ChatList, ChatListItem, Avatar, Column, Row, Title, Subtitle } from '@livechat/ui-kit'\n\nimport { decryptMessageForPrivateKey } from '../utils/AESEncryption';\n\nconst GET_GROUPS = gql`\n  query getGroupsWithUser($username: String!) {\n    groupsByUser(username: $username){\n      id\n      name\n      users {\n        username\n      }\n      privateKey\n    }\n  }\n`;\n\nconst GROUP_SUBSCRIPTION = gql`\n    subscription getNewGroups($username: String!){\n        newGroup(username: $username){\n          id\n          users{\n            username\n          }\n          name\n          publicKey\n          privateKey\n        }\n    }\n`;\n\nfunction ChatLeftList({ selectedGroup, setSelectedGroup, setDoneFetching, client }) {\n  const username = localStorage.getItem('username');\n\n  const {\n    subscribeToMore,\n    loading,\n    error,\n    data,\n    refetch\n  } = useQuery(GET_GROUPS, {\n    variables: {\n      username\n    }\n  });\n\n  useEffect(() => {\n    const subscribe = subscribeToMore({\n      document: GROUP_SUBSCRIPTION,\n      variables: { username },\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev;\n        const newGroup = subscriptionData.data.newGroup;\n        localStorage.setItem(`${newGroup.id}-privateKey`, decryptMessageForPrivateKey(newGroup.privateKey));\n        return Object.assign({}, prev, {\n          groupsByUser: [newGroup, ...prev.groupsByUser]\n        });\n      }\n    });\n    return function cleanup() {\n      subscribe();\n    };\n  }, [subscribeToMore, username]);\n\n\n  if (loading) return 'Loading...';\n  if (error) {\n    client.resetStore();\n    refetch();\n    return `Error! ${error.message}`;\n  }\n\n  const groupDivs = data.groupsByUser.map(group => {\n    if (localStorage.getItem(`${group.id}-privateKey`) == null || localStorage.getItem(`${group.id}-privateKey`) === 'undefined') {\n      localStorage.setItem(`${group.id}-privateKey`, decryptMessageForPrivateKey(group.privateKey));\n    }\n    const users = group.users.map(user => `@${user.username}`);\n    return (\n      <div key={group.id} style={group.id === selectedGroup ? {backgroundColor: \"#0275d8\"} : {}} onClick={() => { setSelectedGroup(group.id); setDoneFetching(false) }}>\n        <ChatListItem active={group.id === selectedGroup}>\n          <Avatar letter={group.name.charAt(0).toUpperCase()} style={{color: '#121212'}}/>\n          <Column fill=\"true\">\n            <Row justify>\n              <Title ellipsis>{group.name}</Title>\n            </Row>\n            <Row justify>\n              <Subtitle ellipsis>{users.join(\", \")}</Subtitle>\n            </Row>\n          </Column>\n        </ChatListItem>\n      </div>\n    )\n  });\n\n  return (<ChatList style={{ maxWidth: '100%' }}>\n    {groupDivs}\n  </ChatList>);\n}\n\nexport default ChatLeftList;","import React, { useEffect } from 'react';\nimport { ChatFeed as ChatFeedUI, Message } from 'react-chat-ui';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport { css } from \"@emotion/core\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { decryptMessage } from '../utils/AESEncryption';\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nfunction ChatFeed({\n    entries,\n    onLoadMore,\n    doneFetching,\n    selectedGroup,\n}) {\n    let messagesEndRef = React.createRef();\n    let messagesStartRef = React.createRef();\n\n    window.lm = onLoadMore;\n    const reversedEntries = [].concat(entries.messagesByGroup).reverse();\n    const username = localStorage.getItem('username');\n    const messages = reversedEntries.map(message => {\n        if (localStorage.getItem(`${selectedGroup}-privateKey`) == null || localStorage.getItem(`${selectedGroup}-privateKey`) === 'undefined') {\n            return null;\n        }\n        return new Message({ id: message.sender === username ? 0 : message.sender, message: decryptMessage(message.content, selectedGroup).message, senderName: `@${message.sender}` })\n    }).filter(Boolean);\n\n\n    useEffect(() => {\n        messagesEndRef.scrollIntoView({ behavior: \"smooth\" });\n        const interval = setInterval(() => {\n            const offset = 0;\n            if (!messagesStartRef) return false;\n            const top = messagesStartRef.getBoundingClientRect().top;\n            const inView = (top + offset) >= 0 && (top - offset) <= window.innerHeight;\n            if (inView) {\n                onLoadMore();\n            }\n        }, 1000);\n        return function cleanup(){\n            clearInterval(interval);\n        }\n    }, [onLoadMore, messagesStartRef, messagesEndRef]);\n    const height = window.innerHeight * 0.86\n    return <div style={{ marginLeft: 5, marginRight: 5, marginBottom: 50 }}>\n        \n        <div style={{ height: 30 }}\n            ref={(el) => { messagesStartRef = el; }}> \n            {\n                doneFetching ? <div/> : <ClipLoader\n                    css={override}\n                    size={30}\n                    color={\"#123abc\"}\n                    loading={true}\n                />\n            }\n        </div>\n        <div style={{maxHeight: height}}>\n            <ChatFeedUI\n                maxHeight = {height}                \n                messages={messages}\n                showSenderName\n                bubblesCentered={false}\n                bubbleStyles={\n                    {\n                        text: {\n                            fontSize: 14\n                        },\n                        chatbubble: {\n                            borderRadius: 30,\n                            padding: 15, \n                            backgroundColor: \"#363636\"\n                        }, \n                        userBubble: {\n                            backgroundColor: '#0084ff', \n                        }\n                    }\n                }\n            />\n        </div>\n        <div style={{ float: \"left\", clear: \"both\" }}\n            ref={(el) => { messagesEndRef = el; }}>\n        </div>\n    </div>;\n}\n\nexport default ChatFeed;","import React, { useEffect } from 'react';\n\nimport {\n    gql,\n    useQuery\n} from '@apollo/client';\nimport { css } from \"@emotion/core\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport ChatFeed from './ChatFeed.react';\n\nconst GET_MESSAGES = gql`\n    query getMessagesForGroup($gid: Int!, $offset: Int, $limit: Int) {\n        messagesByGroup(gid: $gid, count: $limit, offset: $offset){\n            id\n            content\n            ts\n            sender\n            group\n            cType\n        }\n    }\n`;\n\nconst MESSAGE_SUBSCRIPTION = gql`\n    subscription getNewMessages($gid: Int!){\n        newMessage(gid: $gid){\n            id\n            content\n            ts\n            sender\n            group\n            cType\n        }\n    }\n`;\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nfunction ChatMessages({\n    selectedGroup, doneFetching, setDoneFetching\n}) {\n    const { subscribeToMore, loading, error, data, fetchMore } = useQuery(\n        GET_MESSAGES,\n        {\n            variables: {\n                gid: selectedGroup,\n                offset: 0,\n                limit: 50\n            },\n            fetchPolicy: \"cache-and-network\"\n        }\n    );\n\n    useEffect(() => {\n        const subscription = subscribeToMore({\n            document: MESSAGE_SUBSCRIPTION,\n            variables: { gid: selectedGroup },\n            updateQuery: (prev, { subscriptionData }) => {\n                if (!subscriptionData.data) return prev;\n                console.log(subscriptionData, selectedGroup);\n                const newFeedItem = subscriptionData.data.newMessage;\n                return Object.assign({}, prev, {\n                    messagesByGroup: [newFeedItem, ...prev.messagesByGroup]\n                });\n            }\n        });\n        return function cleanup() {\n            subscription();\n        };\n    }, [subscribeToMore, selectedGroup]);\n\n    if (loading) return (<div style={{ marginLeft: '10px', marginRight: '10px', marginBottom: '50px' }}>\n        <div style={{ height: '30px' }}>\n            {\n                !doneFetching && <ClipLoader\n                    css={override}\n                    size={30}\n                    color={\"#123abc\"}\n                    loading={true}\n                />\n            }\n        </div>\n    </div>);\n    if (error) return `Error! ${error.message}`;\n    return <ChatFeed entries={data} selectedGroup={selectedGroup} doneFetching={doneFetching} onLoadMore={() => {\n        if (doneFetching) {\n            return;\n        }\n        return fetchMore({\n            variables: {\n                offset: data.messagesByGroup.length\n            },\n            updateQuery: (prev, { fetchMoreResult }) => {\n                if (fetchMoreResult.messagesByGroup.length === 0) {\n                    setDoneFetching(true);\n                }\n                return Object.assign({}, prev, {\n                    messagesByGroup: [...prev.messagesByGroup, ...fetchMoreResult.messagesByGroup],\n                });\n            }\n        })\n    }}>\n    </ChatFeed>;\n}\n\nexport default ChatMessages;","import '../App.css';\nimport pbkdf2 from 'pbkdf2';\n\nfunction ab2str(buf: any) {\n    return String.fromCharCode.apply(null, Array.from(new Uint8Array(buf)));\n}\n\nasync function exportCryptoPublicKey(key: any) {\n    const exported = await window.crypto.subtle.exportKey(\n        \"spki\",\n        key\n    );\n    const exportedAsString = ab2str(exported);\n    const exportedAsBase64 = window.btoa(exportedAsString);\n    const pemExported = `-----BEGIN PUBLIC KEY-----\\n${exportedAsBase64}\\n-----END PUBLIC KEY-----`;\n    return pemExported;\n}\n\nasync function exportCryptoPrivateKey(key: any) {\n    const exported = await window.crypto.subtle.exportKey(\n        \"pkcs8\",\n        key\n    );\n    const exportedAsString = ab2str(exported);\n    const exportedAsBase64 = window.btoa(exportedAsString);\n    const pemExported = `-----BEGIN PRIVATE KEY-----\\n${exportedAsBase64}\\n-----END PRIVATE KEY-----`;\n    return pemExported;\n}\n\n\nexport async function generateKeys(username: string, modulus: number) {\n    const response = await window.crypto.subtle.generateKey({\n        name: \"RSA-OAEP\",\n        modulusLength: modulus,\n        publicExponent: new Uint8Array([1, 0, 1]),\n        hash: \"SHA-256\",\n    },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    ).then(async (keyPair) => {\n        const publicKey = await exportCryptoPublicKey(keyPair.publicKey);\n        const privateKey = await exportCryptoPrivateKey(keyPair.privateKey);\n        return {\n            privateKey,\n            username,\n            publicKey\n        }\n    });\n    return response;\n}\n\n\nexport function generatePasswordHash(password: string){\n    var derivedKey = pbkdf2.pbkdf2Sync(password, 'salt', 1, 32, 'sha512').toString('hex');\n    return derivedKey;\n}","import CryptoJS from \"crypto-js\";\n\nexport function encryptLocalStorage() {\n    const localStorageString = JSON.stringify(localStorage);\n    const hashedPassword: string = localStorage.getItem('password') || '';\n    const encrypted = CryptoJS.AES.encrypt(localStorageString, hashedPassword).toString();\n    return encrypted;\n}\n\nexport function setLocalStorage(localStorageString: string, hashedPassword: string) {\n    const decrypt = CryptoJS.AES.decrypt(localStorageString, hashedPassword);\n    try{\n        const localStorageDict = JSON.parse(decrypt.toString(CryptoJS.enc.Utf8));\n        for (const [key, value] of Object.entries(localStorageDict)) {\n            localStorage.setItem(key, (value as string));\n        }\n    }\n    catch(e){\n        console.error(e);\n        return false;\n    }\n    return true;\n}","import React, { useState } from 'react';\nimport TagsInput from 'react-tagsinput'\nimport 'react-tagsinput/react-tagsinput.css'\nimport { gql, useMutation } from '@apollo/client';\nimport { generateKeys } from '../utils/generateKeys'\nimport { encryptMessageForPrivateKey } from '../utils/AESEncryption';\nimport {encryptLocalStorage} from '../utils/localStorageKeyGen';\n\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst CREATE_GROUP = gql`\nmutation createGroup($name: String!, $publicKey: String!, $users: [String!]){\n    createGroup(name:$name, publicKey:$publicKey, users:$users){\n      id\n      name\n      publicKey\n      users{\n          username\n          publicKey\n      }\n    }\n  }\n`;\n\nconst SEND_MESSAGE = gql`\n    mutation createPrivateKey($username: String!, $privateKey: String!, $gid: Int!){\n        createPrivateKey(username:$username, gid:$gid, privateKey:$privateKey){\n            id\n            privateKey\n        }\n    }\n`;\n\nconst UPDATE_KEYS = gql`\n    mutation updateKeys($username: String!, $keys: String!){\n        updateKeys(username:$username, keys:$keys){\n            success\n        }\n    }\n`;\n\nfunction GroupChatTags({ show, setShow }) {\n    const [tags, setTags] = useState([]);\n\n    const handleClose = () => setShow(false);\n    const [groupName, setgroupName] = useState(\"\");\n    const [updateKeys] = useMutation(UPDATE_KEYS);\n    const [createPrivateKey] = useMutation(SEND_MESSAGE);\n    const [createGroup] = useMutation(CREATE_GROUP, {\n        onCompleted({ createGroup }) {\n            const username = localStorage.getItem('username');\n            const privateKey = localStorage.getItem('temp-group-privatekey')\n            localStorage.setItem(`${createGroup.id}-privateKey`, privateKey);\n            localStorage.removeItem('temp-group-privatekey');\n            createGroup.users.map(user => {\n                const content = encryptMessageForPrivateKey(privateKey, user);\n                createPrivateKey({ variables: { username: user.username, gid: createGroup.id, privateKey: content} });\n                return true;\n            });\n            updateKeys({variables: {username, keys: encryptLocalStorage()}});\n            handleClose();\n        }\n    });\n\n    const createGroupChat = (raw_tags, groupName) => {\n        raw_tags.push(localStorage.getItem('username')) // transparently include current user in every group they create\n        function onlyUnique(value, index, self) {\n            return self.indexOf(value) === index;\n        }\n        var tags = raw_tags.filter(onlyUnique);\n        if (tags && tags.length > 0) {\n            Promise.resolve(generateKeys(groupName, 256)).then(function (array) {\n                const publicKey = array.publicKey\n                const privateKey = array.privateKey\n                localStorage.setItem('temp-group-privatekey', privateKey);\n                createGroup({ variables: { users: tags, publicKey: publicKey, name: groupName } });\n            });\n        }\n        else {\n            console.log(\"Error, you have no individuals to add to the group\")\n        }\n    }\n\n    return (\n        <div style={{backgroundColor: \"#2e2e2e\"}}>\n            <Modal show={show} transparent={\"true\"} onHide={handleClose}>\n                <Modal.Header closeButton style={{backgroundColor: \"#2e2e2e\", borderColor: \"#2e2e2e\"}}>\n                    <Modal.Title>Input the individuals to add to your new Group Chat!</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body style={{backgroundColor: \"#2e2e2e\", borderColor: \"#2e2e2e\"}}>\n                    <TagsInput style={{color: \"white\"}} value={tags} onChange={(newTags) => setTags(newTags)} inputProps={{\n                        className: 'react-tagsinput-input',\n                        placeholder: 'Add people!'\n                    }} onlyUnique />\n                    <Form style={{marginTop: \"20px\"}}>\n                        <Form.Group>\n                            <Form.Control testid={\"createGroupInputField\"} style={{color: \"black\"}} type=\"text\" placeholder=\"Group Name\" value={groupName} onChange={(e) => setgroupName(e.target.value)} />\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer style={{backgroundColor: \"#2e2e2e\", borderColor: \"#2e2e2e\"}}>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                        <Button variant=\"primary\" onClick={() => createGroupChat(tags, groupName)}>\n                            Create Group!\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>);\n}\nexport default GroupChatTags;\n","import React, { useState } from 'react';\nimport ChatLeftList from './ChatLeftList.react';\nimport ChatMessages from './ChatMessages.react';\nimport Button from 'react-bootstrap/Button';\nimport './../App.css';\nimport {\n    gql,\n    useMutation\n} from '@apollo/client';\nimport Avatar from 'react-avatar';\n\nimport { ThemeProvider, darkTheme, elegantTheme, purpleTheme, defaultTheme } from '@livechat/ui-kit'\nimport GroupChatTags from './GroupChatTags.react';\nimport Form from 'react-bootstrap/Form';\nimport { encryptMessage } from '../utils/AESEncryption';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst SEND_MESSAGE = gql`\n    mutation SendMessage($username: String!, $content: String!, $gid: Int!, $cType: String!){\n        createMessage(sender:$username, group:$gid, content:$content, cType:$cType){\n            id\n            content\n            ts\n        }\n    }\n`;\nconst themes = {\n    defaultTheme: {\n        FixedWrapperMaximized: {\n            css: {\n                boxShadow: '0 0 1em rgba(0, 0, 0, 0.1)',\n            },\n        },\n        OwnMessage: {\n            ...defaultTheme.OwnMessage,\n            backgroundColor: '#456456',\n            secondaryTextColor: '#456456',\n        },\n    },\n    purpleTheme: {\n        ...purpleTheme,\n        TextComposer: {\n            ...purpleTheme.TextComposer,\n            css: {\n                ...purpleTheme.TextComposer.css,\n                marginTop: '1em',\n            },\n        },\n        OwnMessage: {\n            ...purpleTheme.OwnMessage,\n            secondaryTextColor: '#fff',\n        },\n    },\n    elegantTheme: {\n        ...elegantTheme,\n        Message: {\n            ...darkTheme.Message,\n            secondaryTextColor: '#fff',\n        },\n        OwnMessage: {\n            ...darkTheme.OwnMessage,\n            secondaryTextColor: '#fff',\n        },\n    },\n    darkTheme: {\n        ...darkTheme,\n        vars: {\n            ...darkTheme.vars,\n            \"tertiary-color\": \"rgba(40, 40, 40, 0.8)\"\n        },\n        Message: {\n            ...darkTheme.Message,\n            css: {\n                ...darkTheme.Message.css,\n                color: '#fff',\n            },\n        },\n        OwnMessage: {\n            ...darkTheme.OwnMessage,\n            secondaryTextColor: '#fff',\n        },\n        TitleBar: {\n            ...darkTheme.TitleBar,\n            css: {\n                ...darkTheme.TitleBar.css,\n                padding: '1em',\n            },\n        },\n    },\n}\n\nfunction ChatMain({ client }) {\n    console.log(themes.darkTheme);\n    const username = localStorage.getItem('username');\n    const [messageInput, setMessageInput] = useState(\"\");\n    const [createMessage] = useMutation(SEND_MESSAGE);\n\n    const [selectedGroup, setSelectedGroup] = useState(null);\n    const [doneFetching, setDoneFetching] = useState(false)\n    const [show, setShow] = useState(false);\n\n    const logout = () => {\n        localStorage.clear();\n        let fullURL = window.location.href.split('/');\n        fullURL.pop();\n        const baseURL = fullURL.join('/')\n        window.location.href = baseURL;\n    }\n\n    return (<div className=\"main\">\n        <GroupChatTags show={show} setShow={setShow} />\n        <ThemeProvider theme={themes.darkTheme}>\n            <div style={{\n                height: \"100%\",\n                width: \"30%\",\n                position: \"fixed\",\n                zIndex: 1,\n                top: 0,\n                overflowX: 'hidden',\n                paddingTop: '20px',\n                left: 0\n            }}>\n                <div style={{ verticalAlign: 'middle', fontSize: 24 }}>\n                    <Avatar name={username} size={50} round style={{ marginBottom: 20, marginLeft: 25 }} title={`@${username}`} /> {`@${username}`}\n                </div>\n                <div className=\"App\" style={{marginBottom: 10}}>\n                    <Button variant=\"primary\" style={{ marginRight: \"10px\" }} onClick={() => setShow(!show)}>Create Group Chat</Button>\n                    <Button variant=\"secondary\" onClick={logout}>Logout</Button>\n                </div>\n                <ChatLeftList client={client} selectedGroup={selectedGroup} setSelectedGroup={setSelectedGroup} setDoneFetching={setDoneFetching}>\n                </ChatLeftList>\n            </div>\n\n            <div style={{\n                height: \"100%\",\n                width: \"70%\",\n                position: \"fixed\",\n                zIndex: 1,\n                top: 0,\n                overflowX: 'hidden',\n                right: 0,\n                border: \"1px solid rgba(108, 117, 125, 0.1)\",\n            }}>\n                {\n                    selectedGroup && (\n                        <>\n                            <ChatMessages selectedGroup={selectedGroup} doneFetching={doneFetching} setDoneFetching={setDoneFetching} />\n                            <Form style={{ width: \"68%\", bottom: \"20px\", position: \"fixed\", marginLeft: '0', marginRight: '0', display: \"block\", left: \"31%\" }}>\n                                <Form.Group>\n                                    <Form.Control type=\"text\" placeholder=\"Enter message\" value={messageInput} style={{backgroundColor: \"#363636\", color: \"white\", borderColor: \"#363636\"}} onChange={e => setMessageInput(e.target.value)} onKeyPress={event => {\n                                        if (event.key === 'Enter' && event.target.value !== \"\") {\n                                            event.preventDefault()\n                                            createMessage({ variables: { username, gid: selectedGroup, content: encryptMessage(messageInput, \"text\", selectedGroup), cType: \"text\" } });\n                                            setMessageInput(\"\");\n                                        }\n                                    }} />\n                                </Form.Group>\n                            </Form>\n                        </>\n                    )}\n            </div>\n        </ThemeProvider>\n    </div>);\n}\n\nexport default ChatMain;","import React from 'react';\nimport './../App.css';\nimport { ApolloClient, InMemoryCache, createHttpLink, ApolloProvider } from '@apollo/client';\nimport ChatMain from './ChatMain.react';\nimport { setContext } from '@apollo/client/link/context';\nimport { split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws';\n\nfunction ChatMainApolloProvider() {\n    const PRODUCTION = window.location.href.includes(\"https://rithik.me/\");\n    const serverURL = PRODUCTION ? 'https://e2-chat.herokuapp.com' : 'http://localhost:4000';\n    const wsURL = PRODUCTION ? 'wss://e2-chat.herokuapp.com' : 'ws://localhost:4000';\n    const token = localStorage.getItem('token');\n    const httpLink = createHttpLink({\n        uri: `${serverURL}/graphql`,\n    });\n\n    const authLink = setContext((_, { headers }) => {\n        return {\n            headers: {\n                ...headers,\n                authorization: token ? `${token}` : \"\",\n            }\n        }\n    });\n\n    const wsLink = new WebSocketLink({\n        uri: `${wsURL}/graphql`,\n        options: {\n            reconnect: true,\n            connectionParams: {\n                Authorization: token,\n            },\n        }\n    });\n\n    const splitLink = split(\n        ({ query }) => {\n            const definition = getMainDefinition(query);\n            return (\n                definition.kind === 'OperationDefinition' &&\n                definition.operation === 'subscription'\n            );\n        },\n        wsLink,\n        authLink.concat(httpLink),\n    );\n\n    const client = new ApolloClient({\n        link: splitLink,\n        cache: new InMemoryCache()\n    });\n\n    return (<ApolloProvider client={client}>\n        <div>\n            <ChatMain client={client} />\n        </div>\n    </ApolloProvider>);\n}\n\nexport default ChatMainApolloProvider;\n","import React, { useState } from 'react';\nimport './../App.css';\nimport { generateKeys, generatePasswordHash } from '../utils/generateKeys'\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField'\nimport { gql, useMutation, useQuery } from '@apollo/client';\nimport Alert from '@material-ui/lab/Alert';\nimport IconButton from '@material-ui/core/IconButton';\nimport Collapse from '@material-ui/core/Collapse';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport { encryptLocalStorage, setLocalStorage } from '../utils/localStorageKeyGen';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\n\nconst customTheme = createMuiTheme({\n\toverrides: {\n\t\tMuiFormLabel: { root: { color: 'white', borderColor: 'white' } },\n\t\tMuiOutlinedInput: {\n\t\t\troot: {\n\t\t\t\t'& $notchedOutline': {\n\t\t\t\t\tborderColor: 'rgba(255, 255, 255, 0.23)',\n\t\t\t\t},\n\t\t\t\t'&:hover:not($disabled):not($focused):not($error) $notchedOutline': {\n\t\t\t\t\tborderColor: '#4A90E2',\n\t\t\t\t\t'@media (hover: none)': {\n\t\t\t\t\t\tborderColor: 'rgba(255, 255, 255, 0.23)',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t'&$focused $notchedOutline': {\n\t\t\t\t\tborderColor: '#4A90E2',\n\t\t\t\t\tborderWidth: 1,\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t\tMuiInput: {\n\t\t\tinput: {\n\t\t\t\t\"&::placeholder\": {\n\t\t\t\t\tcolor: \"gray\"\n\t\t\t\t},\n\t\t\t\tcolor: \"white\", // if you also want to change the color of the input, this is the prop you'd use\n\t\t\t}\n\t\t}\n\t}\n});\n\n\nconst CREATE_USER = gql`\n\tmutation CreateUser($username: String!, $publicKey: String!){\n\t  createUser(username:$username, publicKey:$publicKey){\n\t    id\n\t    username\n\t    publicKey\n\t  }\n\t}\n`;\nconst CREATE_TOKEN = gql`\n\tmutation CreateToken($username: String!, $publicKey: String!){\n\t\t  createToken(username:$username, publicKey:$publicKey){\n\t\t    token\n\t\t    username\n\t\t}\n\t}\n`;\nconst GET_USER = gql`\n\tquery User($username: String!){\n\t\tuser(username:$username){\n\t\t\tusername\n\t\t\tid\n\t\t\tkeys\n\t\t}\n\t}\n`;\n\nconst UPDATE_KEYS = gql`\n    mutation updateKeys($username: String!, $keys: String!){\n        updateKeys(username:$username, keys:$keys){\n            success\n        }\n    }\n`;\n\n// register the user\nfunction Register() {\n\tconst [updateKeys] = useMutation(UPDATE_KEYS);\n\tconst [createUser] = useMutation(CREATE_USER, {\n\t\tonCompleted({ createUser }) {\n\t\t\tconst username = createUser.username;\n\t\t\tconst publicKey = createUser.publicKey;\n\t\t\tcreateToken({ variables: { username, publicKey } });\n\t\t}\n\t});\n\tconst [createToken] = useMutation(CREATE_TOKEN, {\n\t\tonCompleted({ createToken }) {\n\t\t\tconst password = tab === 'login' ? loginPassword : registerPassword;\n\t\t\tlocalStorage.setItem('token', createToken.token);\n\t\t\tlocalStorage.setItem('username', createToken.username);\n\t\t\tlocalStorage.setItem('password', generatePasswordHash(password));\n\t\t\tupdateKeys({ variables: { username: createToken.username, keys: encryptLocalStorage() } });\n\t\t\twindow.location.href = window.location.href + 'main';\n\t\t}\n\t});\n\n\tconst [createLoginToken] = useMutation(CREATE_TOKEN, {\n\t\tonCompleted({ createToken }) {\n\t\t\tlocalStorage.setItem('token', createToken.token);\n\t\t\twindow.location.href = window.location.href + 'main';\n\t\t}\n\t});\n\n\tconst [registerUsername, setRegisterUsername] = useState('');\n\tconst [registerPassword, setRegisterPassword] = useState('');\n\n\tconst [loginUsername, setLoginUsername] = useState('');\n\tconst [loginPassword, setLoginPassword] = useState('');\n\n\tconst [registerUsernameError, setRegisterUsernameError] = useState(false);\n\tconst [loginError, setLoginError] = useState(false);\n\n\tconst [buttonPressed, setButtonPressed] = useState(false);\n\n\tconst [tab, setTab] = useState('login');\n\n\tconst { error, refetch } = useQuery(GET_USER, {\n\t\tvariables: { username: tab === 'login' ? loginUsername : registerUsername },\n\t});\n\n\tconst setKeys = async (myUsernameValue) => {\n\t\tconst username = tab === 'login' ? loginUsername : registerUsername;\n\t\tPromise.resolve(generateKeys(myUsernameValue, 4096)).then(function (array) {\n\t\t\tconst publicKey = array.publicKey\n\t\t\tconst privateKey = array.privateKey\n\t\t\tcreateUser({ variables: { username, publicKey } });\n\t\t\tlocalStorage.setItem('user-publicKey', publicKey);\n\t\t\tlocalStorage.setItem('user-privateKey', privateKey);\n\t\t\tlocalStorage.setItem('username', username);\n\t\t});\n\t}\n\n\tconst registerUser = async () => {\n\t\tconst { data: userData } = await refetch({ username: registerUsername });\n\t\tif (error) {\n\t\t\tsetKeys(registerUsername);\n\t\t}\n\t\telse {\n\t\t\tif (userData.user == null) {\n\t\t\t\tsetRegisterUsernameError(false);\n\t\t\t\tsetKeys(registerUsername);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsetRegisterUsernameError(true);\n\t\t\t\tsetButtonPressed(false);\n\t\t\t}\n\t\t}\n\t}\n\n\tconst loginUser = async () => {\n\t\tconst { data: userData } = await refetch({ username: loginUsername });\n\t\tconsole.log(userData);\n\t\tif (error) {\n\t\t\tconsole.error(error);\n\t\t\tsetLoginError(true);\n\t\t\tsetButtonPressed(false);\n\t\t}\n\t\telse {\n\t\t\tif (userData.user === null) {\n\t\t\t\tsetLoginError(true);\n\t\t\t\tsetButtonPressed(false);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst hashedPassword = generatePasswordHash(loginPassword);\n\t\t\t\tconst success = setLocalStorage(userData.user.keys, hashedPassword);\n\t\t\t\tif (success) {\n\t\t\t\t\tconst username = localStorage.getItem('username');\n\t\t\t\t\tconst publicKey = localStorage.getItem('user-publicKey');\n\t\t\t\t\tcreateLoginToken({ variables: { username, publicKey } });\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsetLoginError(true);\n\t\t\t\t\tsetButtonPressed(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (\n\t\t<ThemeProvider theme={customTheme}>\n\t\t\t<Tabs fill={true}\n\t\t\t\tid=\"controlled-tab-example\"\n\t\t\t\tclassName=\"tabHeadings\"\n\t\t\t\tactiveKey={tab}\n\t\t\t\tonSelect={(k) => setTab(k)}\n\t\t\t>\n\t\t\t\t<Tab eventKey=\"login\" title=\"Login\">\n\t\t\t\t\t<div className=\"register\">\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\t\tstyle: { color: \"white\" },\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tid=\"outlined-basic\" label=\"Username\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={loginUsername}\n\t\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\t\tonChange={(e) => setLoginUsername(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\t\tstyle: { color: \"white\" },\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tid=\"outlined-basic\" label=\"Password\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={loginPassword}\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\t\tonChange={(e) => setLoginPassword(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Button disabled={buttonPressed} onClick={(e) => {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\tsetButtonPressed(true);\n\t\t\t\t\t\t\tloginUser()\n\t\t\t\t\t\t}} variant=\"contained\" color=\"secondary\">\n\t\t\t\t\t\t\t{buttonPressed && <CircularProgress\n\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\tstyle={{ color: 'white', marginRight: '10px' }}\n\t\t\t\t\t\t\t/>} Login\n\t\t\t</Button>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Collapse in={loginError}>\n\t\t\t\t\t\t\t<Alert\n\t\t\t\t\t\t\t\taction={\n\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\taria-label=\"close\"\n\t\t\t\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetLoginError(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<CloseIcon fontSize=\"inherit\" />\n\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvariant=\"filled\" severity=\"error\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tInvalid Login\n\t\t\t\t</Alert>\n\t\t\t\t\t\t</Collapse>\n\n\t\t\t\t\t</div>\n\t\t\t\t</Tab>\n\t\t\t\t<Tab eventKey=\"register\" title=\"Register\">\n\t\t\t\t\t<div className=\"register\">\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\t\tstyle: { color: \"white\" },\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tid=\"outlined-basic\" label=\"Username\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={registerUsername}\n\t\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\t\tonChange={(e) => setRegisterUsername(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\t\tstyle: { color: \"white\" },\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tid=\"outlined-basic\" label=\"Password\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={registerPassword}\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tcolor={'secondary'}\n\t\t\t\t\t\t\tfullWidth={true}\n\t\t\t\t\t\t\tonChange={(e) => setRegisterPassword(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Button disabled={buttonPressed} onClick={(e) => {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\tsetButtonPressed(true);\n\t\t\t\t\t\t\tregisterUser();\n\t\t\t\t\t\t}} variant=\"contained\" color=\"secondary\">\n\t\t\t\t\t\t\t{buttonPressed && <CircularProgress\n\t\t\t\t\t\t\t\tsize={20}\n\t\t\t\t\t\t\t\tstyle={{ color: 'white', marginRight: '10px' }}\n\t\t\t\t\t\t\t/>} Register\n\t\t\t</Button>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Collapse in={registerUsernameError}>\n\t\t\t\t\t\t\t<Alert\n\t\t\t\t\t\t\t\taction={\n\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\taria-label=\"close\"\n\t\t\t\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetRegisterUsernameError(false);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<CloseIcon fontSize=\"inherit\" />\n\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvariant=\"filled\" severity=\"error\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tInvalid username - choose a unique username\n\t\t\t\t</Alert>\n\t\t\t\t\t\t</Collapse>\n\n\t\t\t\t\t</div>\n\t\t\t\t</Tab>\n\t\t\t</Tabs>\n\t\t</ThemeProvider>\n\t);\n}\n\nexport default Register;\n","import React from 'react';\nimport './../App.css';\nimport Register from './register.react'\nimport { ApolloClient, InMemoryCache, createHttpLink, ApolloProvider } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { split } from '@apollo/client';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { WebSocketLink } from '@apollo/client/link/ws';\n\nfunction RegisterApolloProvider() {\n    const PRODUCTION = window.location.href.includes(\"https://rithik.me/\");\n    const serverURL = PRODUCTION ? 'https://e2-chat.herokuapp.com' : 'http://localhost:4000';\n    const wsURL = PRODUCTION ? 'wss://e2-chat.herokuapp.com' : 'ws://localhost:4000';\n    const token = localStorage.getItem('token');\n    const httpLink = createHttpLink({\n        uri: `${serverURL}/graphql`,\n    });\n\n    const authLink = setContext((_, { headers }) => {\n        return {\n            headers: {\n                ...headers,\n                authorization: token ? `${token}` : \"\",\n            }\n        }\n    });\n\n    const wsLink = new WebSocketLink({\n        uri: `${wsURL}/graphql`,\n        options: {\n            reconnect: true,\n            connectionParams: {\n                Authorization: token,\n            },\n        }\n    });\n\n    const splitLink = split(\n        ({ query }) => {\n            const definition = getMainDefinition(query);\n            return (\n                definition.kind === 'OperationDefinition' &&\n                definition.operation === 'subscription'\n            );\n        },\n        wsLink,\n        authLink.concat(httpLink),\n    );\n\n    const client = new ApolloClient({\n        link: splitLink,\n        cache: new InMemoryCache()\n    });\n\n    return (<ApolloProvider client={client}>\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Register />\n            </header>\n        </div>\n    </ApolloProvider>);\n}\n\nexport default RegisterApolloProvider;\n","import React from 'react';\nimport './App.css';\nimport {\n  Switch,\n  Route,\n  HashRouter\n} from \"react-router-dom\";\nimport ChatMainApolloProvider from './components/ChatMainApolloProvider.react';\nimport RegisterApolloProvider from './components/RegisterApolloProvider.react';\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n      <Switch>\n        <Route path=\"/main\">\n          <ChatMainApolloProvider />\n        </Route>\n        <Route path=\"/\">\n          <RegisterApolloProvider />\n        </Route>\n      </Switch>\n    </HashRouter>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}